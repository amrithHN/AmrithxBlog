<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Assembly on Embedded system Robotics notes</title>
    <link>http://localhost:1313/tag/assembly/</link>
    <description>Recent content in Assembly on Embedded system Robotics notes</description>
    <generator>Hugo -- 0.148.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 03 Oct 2022 13:44:53 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tag/assembly/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[1] ARM Minimal Assembly code (cortex m3/m4 &#43; keil IDE)</title>
      <link>http://localhost:1313/2022/10/03/1-arm-minimal-assembly-code-coretx-m3-m4-keil-ide/</link>
      <pubDate>Mon, 03 Oct 2022 13:44:53 +0000</pubDate>
       <guid isPermaLink="false">https://armphibian.wordpress.com/?p=372</guid> 
      <description>&lt;p&gt;ARM processors have supported two different instruction sets: the &lt;strong&gt;ARM instructions&lt;/strong&gt; that are &lt;strong&gt;32 bits&lt;/strong&gt; and &lt;strong&gt;Thumb instructions&lt;/strong&gt; that are &lt;strong&gt;16 bits&lt;/strong&gt;. Thumb2 instructuction was introduced later which are 32bit instruction and the processor doesnt have to switch between modes to perform instructions. &lt;strong&gt;ARM is faster as it requires less clock cycles&lt;/strong&gt; for execution &lt;strong&gt;whereas Thumb instruction require high code density&lt;/strong&gt; (ex ARM perform an operation with 3 instructions whereas thumb can do the same with 2 thus saving code space but reducing operating speed since it is 16bit instruction).&lt;/p&gt;</description>
    </item>
    <item>
      <title>8051 assembly code(using edsim51/keil C51 IDE)</title>
      <link>http://localhost:1313/2022/09/18/8051-assembly-code/</link>
      <pubDate>Sun, 18 Sep 2022 08:57:43 +0000</pubDate>
       <guid isPermaLink="false">https://armphibian.wordpress.com/?p=276</guid> 
      <description>&lt;p&gt;&lt;strong&gt;Blink an led with delay&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;org 00h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main:	mov A,#0FFh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;here:	mov P1,A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;acall delay
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov P1,#0FEH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;acall delay
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sjmp heredelay:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov R0,#0FH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outer:	mov R1,#0FH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inner:	DJNZ R1,inner
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DJNZ R0,outer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ret
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;End
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;up/ down counter &amp;ndash; use same program just inc or dec to get up/down&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         org 00h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main:	 mov A,#0FFh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;here:    mov P1,A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         acall delay
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         dec A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         sjmp here
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;delay: mov R0,#0FH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outer: mov R1,#0FH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inner: DJNZ R1,inner
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       DJNZ R0,outer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Ret
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       End
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Write &amp;lsquo;1&amp;rsquo; seven segment display&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
