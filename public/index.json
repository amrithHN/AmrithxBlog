[{"content":" #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026#34;stdint.h\u0026#34; union { uint16_t ADC_16; struct{ uint8_t adc_low; uint8_t adc_high; }adc_struct; }ADC_16; void bitmagic() { ADC_16.adc_struct.adc_low = 0xAD; ADC_16.adc_struct.adc_high = 0xDE; printf(\u0026#34;%x\u0026#34;,*((uint16_t*)\u0026amp;ADC_16)); } int main(void) { bitmagic(); return EXIT_SUCCESS; } The above code should output 0xDEAD value when run .\nExplanation:\nUnion allocate the largest members size in memory , and all the members are stacked on top of each other this results in two struct fields pointing to the High byte of 16 bit union , while the other is the low byte\nUsage: when reading ADC for example if the registers are held in two different 8bit registers they can be packed as a single 16bit value without any bit shifting or masking.\n","permalink":"http://localhost:1313/2025/02/19/union-magic-union-in-c-for-packing/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;stdint.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eunion\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003euint16_t\u003c/span\u003e ADC_16;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003euint8_t\u003c/span\u003e adc_low;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003euint8_t\u003c/span\u003e adc_high;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}adc_struct;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}ADC_16;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebitmagic\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ADC_16.adc_struct.adc_low \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0xAD\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ADC_16.adc_struct.adc_high \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0xDE\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%x\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e((\u003cspan style=\"color:#66d9ef\"\u003euint16_t\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eADC_16));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ebitmagic\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e EXIT_SUCCESS;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe above code should output \u003cstrong\u003e0xDEAD\u003c/strong\u003e value when run .\u003c/p\u003e\n\u003cp\u003eExplanation:\u003c/p\u003e\n\u003cp\u003eUnion allocate the largest members size in memory , and all the members are stacked on top of each other this results in two struct fields pointing to the High byte of 16 bit union , while the other is the low byte\u003c/p\u003e","title":"Union magic : union in C for packing"},{"content":" #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026#34;stdint.h\u0026#34; typedef struct{ uint8_t bit0:1; uint8_t bit1:1; uint8_t bit2:1; uint8_t bit3:1; uint8_t bit4:1; uint8_t bit5:1; uint8_t bit6:1; uint8_t bit7:1; uint8_t bit8:1; }mybits; void bitmagic(uint8_t var) { mybits *spi1; spi1=(mybits *)\u0026amp;var; printf(\u0026#34;%b\u0026#34;,*((uint8_t *)spi1)); } int main(void) { bitmagic(0xA0); return EXIT_SUCCESS; } Bit fields are very useful to manipulate individual bits and packed with struct\nThe above code demonstrates a simple example of such usage\nHave a great day!\n","permalink":"http://localhost:1313/2025/02/19/bit-magic-bitfields-in-c-struct/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include \u0026lt;stdio.h\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include \u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include \u0026#34;stdint.h\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etypedef struct{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euint8_t bit0:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euint8_t bit1:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euint8_t bit2:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euint8_t bit3:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euint8_t bit4:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euint8_t bit5:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euint8_t bit6:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euint8_t bit7:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euint8_t bit8:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}mybits;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evoid bitmagic(uint8_t \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tmybits \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003espi1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tspi1\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(mybits \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprintf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%b\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e((uint8_t \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)spi1));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eint\u003c/span\u003e main(void) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tbitmagic(\u003cspan style=\"color:#ae81ff\"\u003e0xA0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e EXIT_SUCCESS;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBit fields are very useful to manipulate individual bits and packed with struct\u003c/p\u003e\n\u003cp\u003eThe above code demonstrates a simple example of such usage\u003c/p\u003e","title":"Bit magic : Bitfields in C struct"},{"content":"There are multiple ways to do this\nusing _write() override use they below code to override _write in printf\nint _write(int fd, char* ptr, int len) { HAL_UART_Transmit(\u0026amp;huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY); return len; } Note: IF you do not see any output use the below code to clear buffer before calling any printf and after UART init\nsetbuf(stdout, NULL); 2. Using Putchar method:\n#ifdef __GNUC__ #define PUTCHAR_PROTOTYPE int __io_putchar(int ch) #else #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f) #endif PUTCHAR_PROTOTYPE { HAL_UART_Transmit(\u0026amp;huart2, (uint8_t *)\u0026amp;ch, 1, HAL_MAX_DELAY); return ch; } 3. third method using SWV in stm32\nenable SWV before using this to see output\nmake sure syscalls.c is present in the project\nint __io_putchar(int ch) { // Write character to ITM ch.0 ITM_SendChar(ch); return(ch); } or int _write(int file, char *ptr, int len) { /* Implement your write code here, this is used by puts and printf for example */ int i=0; for(i=0 ; i\u0026lt;len ; i++) ITM_SendChar((*ptr++)); return len; } ","permalink":"http://localhost:1313/2023/04/26/printf-redirect-to-uart2-stm32/","summary":"\u003cp\u003eThere are multiple ways to do this\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eusing _write() override\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003euse they below code to override _write in printf\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eint _write(int fd, char* ptr, int len) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    HAL_UART_Transmit(\u0026amp;huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    return len;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNote: IF you do not see any output use the below code to clear buffer before calling any printf and after UART init\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esetbuf(stdout, NULL);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e2. Using Putchar method:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#ifdef __GNUC__\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#else\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#endif\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePUTCHAR_PROTOTYPE\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eHAL_UART_Transmit\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ehuart2, (\u003cspan style=\"color:#66d9ef\"\u003euint8_t\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ech, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, HAL_MAX_DELAY);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e ch;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e3. third method using SWV in stm32\u003c/p\u003e","title":"Printf redirect to UART2 stm32"},{"content":"two files Sum1ton.c and load.a\n#include\u0026lt;stdio.h\u0026gt; extern int load(int x,int y); int main(){ int result=0; int count=9; result=load(0x0,count+1); printf(\u0026#34;Sum of number from 1to %d is %d\\n\u0026#34;,count,result); return 0; } .section .text .global load .type load, @function load: li a3,0x0 add a4,a0,zero # Iintialise sum register a4 with 0 register addressing mode add a2,a0,a1 # store count of 10 in a2 , al= 0xa from main add a3,a0,zero //init a3 to 0 loop: add a4,a3,a4 # a4= a3+a4 addi a3,a3,1 # immediate addr mode add 1 count=count+1 blt a3,a2,loop # blt = branch if less than a4\u0026lt;a2 add a0,a4,zero ret ","permalink":"http://localhost:1313/2023/04/26/riscv-workshop-day2/","summary":"\u003cp\u003etwo files Sum1ton.c and load.a\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eextern \u003cspan style=\"color:#a6e22e\"\u003eint\u003c/span\u003e load(\u003cspan style=\"color:#a6e22e\"\u003eint\u003c/span\u003e x,\u003cspan style=\"color:#a6e22e\"\u003eint\u003c/span\u003e y);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eint\u003c/span\u003e main(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eint\u003c/span\u003e result\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eint\u003c/span\u003e count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        result\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eload(\u003cspan style=\"color:#ae81ff\"\u003e0x0\u003c/span\u003e,count\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        printf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sum of number from 1to \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e is \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,count,result);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esection \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etext\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eglobal load\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etype load, \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003efunction\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eload:   li a3,\u003cspan style=\"color:#ae81ff\"\u003e0x0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        add a4,a0,zero \u003cspan style=\"color:#75715e\"\u003e# Iintialise sum register a4 with 0 register addressing mode\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        add a2,a0,a1   \u003cspan style=\"color:#75715e\"\u003e# store count of 10 in a2 , al= 0xa from main         add a3,a0,zero //init a3 to 0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eloop:   add a4,a3,a4   \u003cspan style=\"color:#75715e\"\u003e# a4= a3+a4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        addi a3,a3,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e# immediate addr mode add 1 count=count+1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        blt a3,a2,loop \u003cspan style=\"color:#75715e\"\u003e# blt = branch if less than a4\u0026lt;a2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        add a0,a4,zero\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ret\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"RiscV workshop day2"},{"content":"basic Gcc commands\nriscv64-unknown-elf-gcc -O1 -mabi=lp64 -march=rv64i filename.c\nriscv64-unknown-elf-objdump -d a.out | less\nsimulation\nspike pk a.out\nspike -d pk a.out\n:until pc 0 100b0\n100b0 is the memory location to jump to example main for breakpoint reg 0 a2 // read valur of register a2\n","permalink":"http://localhost:1313/2023/04/26/riscv-workshop-day-1/","summary":"\u003cp\u003ebasic Gcc commands\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eriscv64-unknown-elf-gcc -O1 -mabi=lp64 -march=rv64i filename.c\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eriscv64-unknown-elf-objdump -d a.out | less\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003esimulation\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003espike pk a.out\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003espike -d pk a.out\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e:until pc 0 100b0\u003c/em\u003e\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cem\u003e100b0\u003c/em\u003e is the memory location to jump to example main for breakpoint\u003c/dt\u003e\n\u003cdd\u003e\n\u003cp\u003ereg 0 a2 // read valur of register a2\u003c/p\u003e\n\u003c/dd\u003e\n\u003c/dl\u003e","title":"RiscV Workshop day 1"},{"content":"va_list, va_start, va_end are used for variable argument from header \u0026ldquo;stdarg.h\u0026rdquo;\nvsprintf is used to combine the va_list arguments with the message passed to create a single string\ncode:\n#include \u0026#34;string.h\u0026#34; #include \u0026#34;stdlib.h\u0026#34; #include \u0026#34;stdarg.h\u0026#34; #define DUART \u0026amp;huart1 #define CUART \u0026amp;huart2 void printmsg(char* msg,...){ #ifdef DEBUG_MSG unsigned char buf[100]; va_list args; //list of arguments va_start(args,msg); //point to first argument in list vsprintf(buf,msg,args); // replace each argument in msg with that of args HAL_UART_Transmit_IT(DUART,buf,strlen(buf)); va_end(args); #endif } ","permalink":"http://localhost:1313/2023/04/21/print-message-using-arguments-with-uart/","summary":"\u003cp\u003eva_list, va_start, va_end are used for variable argument from header \u0026ldquo;stdarg.h\u0026rdquo;\u003c/p\u003e\n\u003cp\u003evsprintf is used to combine the va_list arguments with the message passed to create a single string\u003c/p\u003e\n\u003cp\u003ecode:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;string.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;stdlib.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;stdarg.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define DUART \u0026amp;huart1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define CUART \u0026amp;huart2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprintmsg\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e msg,...){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#ifdef DEBUG_MSG\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e buf[\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tva_list args; \t\t\u003cspan style=\"color:#75715e\"\u003e//list of arguments\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eva_start\u003c/span\u003e(args,msg); \u003cspan style=\"color:#75715e\"\u003e//point to first argument in list\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003evsprintf\u003c/span\u003e(buf,msg,args); \u003cspan style=\"color:#75715e\"\u003e// replace each argument in msg with that of args\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eHAL_UART_Transmit_IT\u003c/span\u003e(DUART,buf,\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(buf));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eva_end\u003c/span\u003e(args);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#endif\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Print message using arguments with UART"},{"content":"Simple code that demonstrate how rgb led is setup and how various colors can be set using the below code\n/* * rgb_led.c * * Created on: Jan 28, 2023 * Author: amrith */ #include\u0026#34;rgb_led.h\u0026#34; rgbled_handle_t rgb[3]; void led_init(){ rgb[0].gpio = RGB_LED_1; rgb[1].gpio = RGB_LED_2; rgb[2].gpio = RGB_LED_3; rgb[0].channel = LEDC_CHANNEL_0; rgb[1].channel = LEDC_CHANNEL_1; rgb[2].channel = LEDC_CHANNEL_2; rgb[0].mode = LEDC_HIGH_SPEED_MODE; rgb[1].mode = LEDC_HIGH_SPEED_MODE; rgb[2].mode = LEDC_HIGH_SPEED_MODE; rgb[0].timer = LEDC_TIMER_0; rgb[1].timer = LEDC_TIMER_0; rgb[2].timer = LEDC_TIMER_0; ledc_timer_config_t led_timer_conf = { .speed_mode = LEDC_HIGH_SPEED_MODE, .duty_resolution = LEDC_TIMER_8_BIT, .timer_num = LEDC_TIMER_0, .freq_hz = 100 }; ledc_timer_config(\u0026amp;led_timer_conf); for(int i=0;i\u0026lt;3;i++){ ledc_channel_config_t led_channel_conf= { .gpio_num = rgb[i].gpio, .channel = rgb[i].channel, .timer_sel = rgb[i].timer, .duty = 0, .hpoint = 0, .intr_type = LEDC_INTR_DISABLE, .speed_mode = rgb[i].mode }; ledc_channel_config(\u0026amp;led_channel_conf); } } void led_set_color(int red, int green , int blue){ ledc_set_duty(rgb[0].mode, rgb[0].channel, red); ledc_update_duty(rgb[0].mode,rgb[0].channel); ledc_set_duty(rgb[1].mode, rgb[1].channel, green); ledc_update_duty(rgb[1].mode,rgb[1].channel); ledc_set_duty(rgb[2].mode, rgb[2].channel, blue); ledc_update_duty(rgb[2].mode,rgb[2].channel); } /* * rgb_led.h * * Created on: Jan 28, 2023 * Author: amrith */ #ifndef MAIN_RGB_LED_H_ #define MAIN_RGB_LED_H_ #include \u0026#34;driver/ledc.h\u0026#34; #include \u0026#34;esp_err.h\u0026#34; #define RGB_LED_1 12 #define RGB_LED_2 14 #define RGB_LED_3 27 typedef struct { int gpio; int mode; int channel; int timer; }rgbled_handle_t; void led_init(); void led_set_color(int reg, int green , int blue); #endif /* MAIN_RGB_LED_H_ */ ","permalink":"http://localhost:1313/2023/02/24/esp32-rgb-led-with-pwm-freertos/","summary":"\u003cp\u003eSimple code that demonstrate how rgb led is setup and how various colors can be set using the below code\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e/*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * rgb_led.c\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e *  Created on: Jan 28, 2023\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e *      Author: amrith\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#include\u0026#34;rgb_led.h\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ergbled_handle_t rgb[3];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evoid led_init(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trgb[0].gpio = RGB_LED_1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trgb[1].gpio = RGB_LED_2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trgb[2].gpio = RGB_LED_3;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trgb[0].channel = LEDC_CHANNEL_0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trgb[1].channel = LEDC_CHANNEL_1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trgb[2].channel = LEDC_CHANNEL_2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trgb[0].mode = LEDC_HIGH_SPEED_MODE;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trgb[1].mode = LEDC_HIGH_SPEED_MODE;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trgb[2].mode = LEDC_HIGH_SPEED_MODE;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trgb[0].timer = LEDC_TIMER_0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trgb[1].timer = LEDC_TIMER_0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trgb[2].timer = LEDC_TIMER_0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tledc_timer_config_t led_timer_conf = {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t.speed_mode = LEDC_HIGH_SPEED_MODE,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t.duty_resolution = LEDC_TIMER_8_BIT,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t.timer_num = LEDC_TIMER_0,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t.freq_hz = 100\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tledc_timer_config(\u0026amp;led_timer_conf);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tfor(int i=0;i\u0026lt;3;i++){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tledc_channel_config_t led_channel_conf= {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t.gpio_num = rgb[i].gpio,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t.channel = rgb[i].channel,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t.timer_sel = rgb[i].timer,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t.duty = 0,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t.hpoint = 0,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t.intr_type = LEDC_INTR_DISABLE,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t.speed_mode = rgb[i].mode\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tledc_channel_config(\u0026amp;led_channel_conf);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evoid led_set_color(int red, int green , int blue){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eledc_set_duty(rgb[0].mode, rgb[0].channel, red);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eledc_update_duty(rgb[0].mode,rgb[0].channel);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eledc_set_duty(rgb[1].mode, rgb[1].channel, green);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eledc_update_duty(rgb[1].mode,rgb[1].channel);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eledc_set_duty(rgb[2].mode, rgb[2].channel, blue);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eledc_update_duty(rgb[2].mode,rgb[2].channel);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/*\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * rgb_led.h\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e *\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e *  Created on: Jan 28, 2023\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e *      Author: amrith\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#ifndef MAIN_RGB_LED_H_\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define MAIN_RGB_LED_H_\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;driver/ledc.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;esp_err.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define RGB_LED_1 12\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define RGB_LED_2 14\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define RGB_LED_3 27\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etypedef\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e gpio;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mode;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e channel;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e timer;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\u003cspan style=\"color:#66d9ef\"\u003ergbled_handle_t\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eled_init\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eled_set_color\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e reg, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e green , \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e blue);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#endif \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e/* MAIN_RGB_LED_H_ */\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"ESP32 RGB led with PWM / FreeRTOS"},{"content":"Below is the code to control 3 gpios in rgb led in esp32\n/* Blink Example This example code is in the Public Domain (or CC0 licensed, at your option.) Unless required by applicable law or agreed to in writing, this software is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. */ #include \u0026lt;stdio.h\u0026gt; #include \u0026#34;freertos/FreeRTOS.h\u0026#34; #include \u0026#34;freertos/task.h\u0026#34; #include \u0026#34;driver/gpio.h\u0026#34; #include \u0026#34;esp_log.h\u0026#34; #include \u0026#34;sdkconfig.h\u0026#34; void configure_led(void) { gpio_reset_pin(12); gpio_reset_pin(14); gpio_reset_pin(27); /* Set the GPIO as a push/pull output */ gpio_set_direction(12, GPIO_MODE_OUTPUT); gpio_set_direction(14, GPIO_MODE_OUTPUT); gpio_set_direction(27, GPIO_MODE_OUTPUT); } void app_main(void) { /* Configure the peripheral according to the LED type */ configure_led(); while (1) { /* Toggle the LED state */ vTaskDelay(1000 / portTICK_PERIOD_MS); gpio_set_level(14,0); gpio_set_level(27,1); vTaskDelay(1000 / portTICK_PERIOD_MS); gpio_set_level(27,0); gpio_set_level(12,1); vTaskDelay(1000 / portTICK_PERIOD_MS); gpio_set_level(12,0); gpio_set_level(14,1); } } ","permalink":"http://localhost:1313/2023/01/28/esp32-rtos-simple-rgb-led-blink/","summary":"\u003cp\u003eBelow is the code to control 3 gpios in rgb led in esp32\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/* Blink Example\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e   This example code is in the Public Domain (or CC0 licensed, at your option.)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e   Unless required by applicable law or agreed to in writing, this\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e   software is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e   CONDITIONS OF ANY KIND, either express or implied.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;freertos/FreeRTOS.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;freertos/task.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;driver/gpio.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;esp_log.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;sdkconfig.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econfigure_led\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egpio_reset_pin\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egpio_reset_pin\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e14\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egpio_reset_pin\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e27\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/* Set the GPIO as a push/pull output */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egpio_set_direction\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e, GPIO_MODE_OUTPUT);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egpio_set_direction\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e14\u003c/span\u003e, GPIO_MODE_OUTPUT);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egpio_set_direction\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e27\u003c/span\u003e, GPIO_MODE_OUTPUT);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp_main\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/* Configure the peripheral according to the LED type */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003econfigure_led\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e/* Toggle the LED state */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003evTaskDelay\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e portTICK_PERIOD_MS);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egpio_set_level\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e14\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egpio_set_level\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e27\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003evTaskDelay\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e portTICK_PERIOD_MS);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egpio_set_level\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e27\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egpio_set_level\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003evTaskDelay\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e portTICK_PERIOD_MS);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egpio_set_level\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003egpio_set_level\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e14\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"ESP32/RTOS -- simple rgb led blink"},{"content":" install tmux using package manager , ex: sudo apt install tmux open a terminal , type tmux and hit enter , thats it youre in! Hierarchy in tmux: session \u0026gt; window \u0026gt; pane.Prefix for commands and help: Ctrl-b and sth: issue a command to tmux, inside tmux. Ctrl-b and ?: see all commands.Session commands: tmux: creates a new session and enters it. tmux new -s sessionname: creates a session with the specified name. tmux ls: lists all sessions. Ctrl-b and d: detach current session. Ctrl-b and D: detach selected session (interactive). tmux attach-session -t sessionNameOrNumber: attach to target session. tmux rename-session -t sessionNameOrNumber newName: renames sess. //to get rid of a session, close all panes.Window commands: Ctrl-b and c: create a window. Ctrl-b and w: choose a window from a list. Ctrl-b and \u0026lt;number\u0026gt;: switch to window \u0026lt;number\u0026gt;. Ctrl-b and p: switch to previous window (acc. to bottom bar). Ctrl-b and n: switch to next window (acc. to bottom bar). Ctrl-b , : Rename current window.Pane commands: Ctrl-d OR exit: kills the current pane, without asking for confirmation. Ctrl-b and x: quit. closes current pane after asking for confirmation. Ctrl-b and %: vertically splits the window into two panes. Ctrl-b and \u0026quot;: horizontally splits the window into two panes. Ctrl-b and o: traverses panes. Ctrl-b and \u0026lt;arrow keys=\u0026quot;\u0026quot;\u0026gt;: traverses panes. Ctrl-b and ; : switches back and forth btw. the last two panes. Ctrl-b z: make pane temporarily go full screen - go back to normal size. Ctrl-b Ctrl-\u0026lt;arrowkey\u0026gt;: resize pane in a certain direction.\n","permalink":"http://localhost:1313/2022/10/31/tmux-basics/","summary":"\u003col\u003e\n\u003cli\u003einstall tmux using package manager , ex: sudo apt install tmux\u003c/li\u003e\n\u003cli\u003eopen a terminal , type tmux and hit enter , thats it youre in!\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ccode\u003eHierarchy in tmux: session \u0026gt; window \u0026gt; pane.Prefix for commands and help: Ctrl-b and sth: issue a command to tmux, inside tmux. Ctrl-b and ?: see all commands.Session commands: tmux: creates a new session and enters it. tmux new -s sessionname: creates a session with the specified name. tmux ls: lists all sessions. Ctrl-b and d: detach current session. Ctrl-b and D: detach selected session (interactive). tmux attach-session -t sessionNameOrNumber: attach to target session. tmux rename-session -t sessionNameOrNumber newName: renames sess. //to get rid of a session, close all panes.Window commands: Ctrl-b and c: create a window. Ctrl-b and w: choose a window from a list. Ctrl-b and \u0026lt;number\u0026gt;: switch to window \u0026lt;number\u0026gt;. Ctrl-b and p: switch to previous window (acc. to bottom bar). Ctrl-b and n: switch to next window (acc. to bottom bar). Ctrl-b , : Rename current window.Pane commands: Ctrl-d OR exit: kills the current pane, without asking for confirmation. Ctrl-b and x: quit. closes current pane after asking for confirmation. Ctrl-b and %: vertically splits the window into two panes. Ctrl-b and \u0026quot;: horizontally splits the window into two panes. Ctrl-b and o: traverses panes. Ctrl-b and \u0026lt;arrow keys=\u0026quot;\u0026quot;\u0026gt;: traverses panes. Ctrl-b and ; : switches back and forth btw. the last two panes. Ctrl-b z: make pane temporarily go full screen - go back to normal size. Ctrl-b Ctrl-\u0026lt;arrowkey\u0026gt;: resize pane in a certain direction.\u003c/code\u003e\u003c/p\u003e","title":"TMUX basics"},{"content":"Initial setup\ninstall emacs \u0026gt; open terminal \u0026gt; type emacs edit init.el inside ~/.emacs.d/ directory and add basic config to make it usable or use shared emacs config ( check the below youtube video for some basic setup ) ;;stop startup screen (setq inhibit-splash-screen t) ;;font (set-face-attribute \u0026#39;default nil :font \u0026#34;Source Code Pro 16\u0026#34;) ;;window controls (add-hook \u0026#39;window-setup-hook \u0026#39;toggle-frame-maximized t) ;; remove menu tool scroll bar (menu-bar-mode -1) (tool-bar-mode -1) (scroll-bar-mode -1) ;; Display line numbers in every buffer (global-display-line-numbers-mode 1) ;;them directory (add-to-list \u0026#39;custom-theme-load-path \u0026#34;~/.emacs.d/themes\u0026#34;) ;; Load the Modus Vivendi dark theme (load-theme \u0026#39;dracula t) ;;C style (setq c-default-style \u0026#34;linux\u0026#34; c-basic-offset 4) ;;eletric pair mode (electric-pair-mode 1) note: C= ctrl key , M = alt key (meta key) , example : C-x C-f means press Ctrl+x together release then press Ctrl+f together\nBasic commands required /info to use emacs\ns elect all buffer C-x h , copy M-w, paste C-y to open dred (file manager / browse directory) : C-x d . opens dred and promts for a directoy to exit emacs C-x C-c File open C-x C-f , file save C-x C-s , close file C-x k , save as C-x C-w Abort a command C-g handy commands:\nCursor:\nControl-A moves the cursor to the start of the current line. Control-E moves the cursor to the end of the current line. ESCAPE-F moves the cursor forward to the next word. ESCAPE-B moves the cursor back to the previous word. ESCAPE-\u0026lt; moves the cursor to the start of the buffer. ESCAPE-\u0026gt; moves the cursor to the end of the buffer. Line edit :\nControl-D deletes forward one letter. Control-K deletes from the point to the end of the line. ESCAPE-D deletes forward one word. ESCAPE-delete deletes backward one word. Emacs has an on-line help system that can be invoked by typing Control-H. If you type the question mark (?), emacs will present a list of help topics you can choose.\nEditing C-x uUndoShift-DelCutCtrl-InsCopyShift-InsPasteC-sInteractive SearchTABIndent Current LineC-M-\\Indent Selection\nBuffers C-x bSwitch BuffersC-x C-bGet a List of BuffersC-x oSwitch to Other WindowC-x 1Close Other WindowC-x 2Split the Screen Horizontally\nuseful information: https://fsl.fmrib.ox.ac.uk/fslcourse/unix_intro/textedit.html#general\nUseful link : http://www.cs.cornell.edu/courses/cs312/2007sp/software/quick-emacs.html\nhttp://ocean.stanford.edu/research/quick_emacs.html\nC programming setup for emacs :\n\u0026amp;ab_channel=TimothyUnkert\n","permalink":"http://localhost:1313/2022/10/31/emacs-basics/","summary":"\u003cp\u003eInitial setup\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003einstall emacs \u0026gt; open terminal \u0026gt; type emacs\u003c/li\u003e\n\u003cli\u003eedit \u003cstrong\u003einit.el\u003c/strong\u003e inside ~/.emacs.d/ directory and add basic config to make it usable or use shared emacs config \u003cstrong\u003e( check the below youtube video for some basic setup )\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e;;stop startup screen\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(setq inhibit\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003esplash\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003escreen t)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e;;font\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(set\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eface\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eattribute \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;default nil :font \u0026#34;Source Code Pro 16\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e;;window controls\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(add\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ehook \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;window-setup-hook \u0026#39;\u003c/span\u003etoggle\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eframe\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003emaximized t)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e;; remove menu \u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e scroll bar\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(menu\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ebar\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003emode \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ebar\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003emode \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(scroll\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ebar\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003emode \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e;; Display line numbers \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e every buffer\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(global\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003edisplay\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eline\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003enumbers\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003emode \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e;;them directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(add\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eto\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003elist \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;custom-theme-load-path \u0026#34;~/.emacs.d/themes\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e;; Load the Modus Vivendi dark theme\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(load\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003etheme \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;dracula t)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e;;C style\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(setq c\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003edefault\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003estyle \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;linux\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      c\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ebasic\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eoffset \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e;;eletric pair mode\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(electric\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003epair\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003emode \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003enote: C= ctrl key , M = alt key (meta key) , example : C-x C-f means press Ctrl+x together release then press Ctrl+f together\u003c/p\u003e","title":"Emacs basics"},{"content":"When it comes to programming Arm in thumb2 instructions there are only a handful of opcodes to be considered\n1.MOV is used to copy data between registers\nex: MOV R0,R1\n2. Basic load/Store commands: Used to load /store data between memory and Registers\nMOV R2,=0x20000000\nLDR R1,[R2]\nSTR [R2],[R3] //ASSUME R3 HAS A VALID ADDRESS\nVariation in LDR and STR include LDRB (load byte), STRB (store byte) , LDRH (Half word 16bit) , STRH (STR half word 16 bit)\n3. Assembler directives\nAREA IMPORT, EXPORT END DCD, DCW, DCB EQU INCLUDE AREA : used to define code space\nAREA my_code,CODE,READONLY __main MOV R0,R1 my_func MOV R1,R2 IMPORT/EXPORT : used to export/import a function or data when using multiple assembly files\n//file1.s IMPORT my_func //inside the program BL my_func //file2.s EXPORT my_func //function my_func MOV R0,R1 END-- used to mark the end of assembly code\nEXPORT __main AREA my_code,CODE,READONLY __main MOV R0,R1 STR R2,[R0] HERE\tB\tHERE END defining constant values using DCD,DCB,DCW , EQU , RN (rename)\nEXPORT __main COUNTER RN R0 ; R0 REGISTER IS RENAMED TO COUNTER! AREA my_code,CODE,READONLY __main MOV R0,R1 STR R2,[R0] HERE\tB\tHERE my_data dcb 0x30 dcw 0x1032 dcd 0x12121212,0x23232323 END 4. Arithmetic and logic instructions\n5. Branch instruction\n","permalink":"http://localhost:1313/2022/10/18/2-arm-assembly/","summary":"\u003cp\u003eWhen it comes to programming Arm in thumb2 instructions there are only a handful of opcodes to be considered\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2022/10/m3_ins.png?w=1024\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1.MOV is used to copy data between registers\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eex: \u003cstrong\u003eMOV R0,R1\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2. Basic load/Store commands\u003c/strong\u003e: Used to load /store data between memory and Registers\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMOV R2,=0x20000000\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLDR R1,[R2]\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSTR [R2],[R3]\u003c/strong\u003e //ASSUME R3 HAS A VALID ADDRESS\u003c/p\u003e\n\u003cp\u003eVariation in LDR and STR include LDRB (load byte), STRB (store byte) , LDRH (Half word 16bit) , STRH (STR half word 16 bit)\u003c/p\u003e","title":"[2] ARM assembly"},{"content":"ARM processors have supported two different instruction sets: the ARM instructions that are 32 bits and Thumb instructions that are 16 bits. Thumb2 instructuction was introduced later which are 32bit instruction and the processor doesnt have to switch between modes to perform instructions. ARM is faster as it requires less clock cycles for execution whereas Thumb instruction require high code density (ex ARM perform an operation with 3 instructions whereas thumb can do the same with 2 thus saving code space but reducing operating speed since it is 16bit instruction).\nRegisters\nGeneral-purpose registers, R0-R12 R0-R7 - low registers (can be used in all instructions) R8-R12 - high registers (cannot be used by thumb instruction) Stack Pointer (SP): R13 is used as SP. banked register with two copies, namely Main Stack Pointer (MSP)and Process Stack Pointer (PSP) Link Register (LR): R14 stores the value of return address when a function is called Program Counter(PC): R15 points to next instruction to be executed Program Status Registers (PSRs): Application Program Status Register (APSR) Interrupt Program Status Register (IPSR) Execution Program Status Register (EPSR) Control register (CONTROL): The control register is used to configure theprivilege level as well as to perform the selection of stack pointer register Note: Why microprocessors have separate carry and overflow flags? The carry flag represents overflow for unsigned numbers while signed number overflow is indicated by the overflow flag.Signed and unsigned overflows occur independently. There can be four possible out-comes when an arithmetic operation such as addition is performed. (1) no overflow,(2) unsigned overflow only, (3) signed overflow only, and (4) both signed and unsignedoverflows.\nReset sequence\nNote: The instructions written as part of the reset handler are also sometimes referred to as bootcode.\nAn assembly program needs to perform the following sequence of activities to ensure that the user application program is executed properly.\nDefine the stack size and reserve appropriate memory space for the stack. Define the reset vector. Write the reset handler code to perform any system-related initializations and then make a jump to the user application program Note : Cortex-M processors do not support ARM mode instructions. They only support Thumb-2, which includes a mixture of 16 and 32-bit instructions. There is no way to run ARM instructions on a Cortex-M\nPRESERVE8 THUMB ; Vector Table Mapped to Address 0 at Reset ; Linker requires __Vectors to be exported AREA RESET, DATA, READONLY EXPORT __Vectors __Vectors DCD 0x20008000 ; initial Stack Pointer DCD Reset_Handler ; reset vector ; space 8 ALIGN ; Linker requires Reset_Handler AREA MYCODE, CODE, READONLY ENTRY EXPORT Reset_Handler Reset_Handler MOV R0 , #0 ; Initial value of sum MOV R1 , #2 ; First even number MOV R2 , #5 ; Counter for the loop iterations lbegin CBZ R2 , lend ; Terminate loop if counter is zero ADD R0 , R1 ; Build the sum ADD R1 , #2 ; Generate next even number SUB R2 , #1 ; Decrement the counter B lbegin lend END The above code initialises the stack pointer and upon reset_handler, some basic add, sub-operations are performed. This is the most minimalistic program. There are other vectors that need to be initialised that have been omitted because we do not need them for this program ;-)\nnote: using Keil IDE, be sure to intend code properly else it throws error!\nkeil ide in debug mode with the above code\nremaining opcodes in further posts! Have a good day !\n","permalink":"http://localhost:1313/2022/10/03/1-arm-minimal-assembly-code-coretx-m3-m4-keil-ide/","summary":"\u003cp\u003eARM processors have supported two different instruction sets: the \u003cstrong\u003eARM instructions\u003c/strong\u003e that are \u003cstrong\u003e32 bits\u003c/strong\u003e and \u003cstrong\u003eThumb instructions\u003c/strong\u003e that are \u003cstrong\u003e16 bits\u003c/strong\u003e. Thumb2 instructuction was introduced later which are 32bit instruction and the processor doesnt have to switch between modes to perform instructions. \u003cstrong\u003eARM is faster as it requires less clock cycles\u003c/strong\u003e for execution \u003cstrong\u003ewhereas Thumb instruction require high code density\u003c/strong\u003e (ex ARM perform an operation with 3 instructions whereas thumb can do the same with 2 thus saving code space but reducing operating speed since it is 16bit instruction).\u003c/p\u003e","title":"[1] ARM Minimal Assembly code (cortex m3/m4 + keil IDE)"},{"content":"\nSimple code example for load and add instruction:\n.equ sum = 0x30 .org 00 main: ldi r16,0xFA ; hex value copy to r16 ldi r17,$AB ; dollar sign to hex ldi r18,0b00001111 ; binary add r16,r17 ; add r16,r17 result r16 ldi r19,11 ; decimal 11 sts sum,r16 ; save value to location 30h (sum is a pointer) here: jmp here AVR MCUs\u0026rsquo; are generally fast, they can execute 16MIPS at 16Mhz because of how the busses are designed and also the simplicity of RSIC architecture.\nProgram bus-\u0026gt; has data bus that is 16 bit wide , this enable the cpu to fetch a word at a time Input/ output using gpio:\nsteps: set DDRx to 0 for input , 1 for output\nwrite PORTx value to turn on or off\n.include \u0026#34;m328pdef.inc\u0026#34; .org 00;PB5 led PD7 switch main: ldi r16,0xFF out DDRD,r16 here: ldi r17,0xFF out PORTD,r17 call delay ldi r17,0x00 out PORTD,r17 call delay jmp here delay: ldi r18,0xF Fouter: ldi r19,0x10 inner: dec r19 brne inner dec r18 brne outer ret .INCLUDE \u0026#34;M328PDEF.INC\u0026#34; .ORG 00;PB5 LED PD7 SWITCH MAIN: INC R16 ; 1. SINGLE REGISTER IMMEDIATE ADD R20,R23 ; 2. REGISTER ADDRESSING MODE LDS R21,0X230 ; 3. DIRECT ADDRESSING MODE IN R16,PINB ; 4. IO ADDRESSING MODE LDI XL,0X30 ; 5. REGISTER INDIRECT ADDRESSING MODE LDI XH,0X01 LD R18,X ST X+,R18 ; USING INCREMENT ON X,Y,Z LDD R4,Y+5 ; 5. REGISTER INDIRECT WITH DISPLACEMENT ; 7.FLASH INDIRECT ADDRESSING LPM ; R0 -\u0026gt; Z IJMP ; FLASH DIRECT ADDRESSING MODE , MOVES TO ADDRESS CONTAINED IN Z NOTE:Stack pointer initial value is 0x0000, meaning it would point to register R0 (which adress is 0x0000) if not initialized. You would not want that, as you use R0 and other register to perform operations. That is why you want to set the stack to some other memory area, specifically to the Internal SRAM (a general purpose RAM area). So initialise stack pointer to a safe value before using function calls, and interrupt service . it is better to init stack before any program.\nNOTE: The AVR stack pointer is implemented as two 8-bit registers in the I/O space\n.MACRO INITSTACK LDI R20,HIGH(RAMEND) OUT SPH,R20\t;SPH AND SPL ARE IO MEMORY SPACE LDI R20,LOW(RAMEND) OUT SPL,R20 .ENDMACRO Timers/counters programming\n8 bit timer in normal mode (stack pointer initialised before main program code)\n.include \u0026#34;m328pdef.inc\u0026#34; .MACRO INITSTACK LDI R20,HIGH(RAMEND) OUT SPH,R20 LDI R20,LOW(RAMEND) OUT SPL,R20 .ENDMACRO ;timer 0 programming MAIN:\tINITSTACK CBI DDRB,5 ;PB5 AS OUTPUT AGAIN:\tCBI PORTB,5\t; CLEAR PB5 CALL DELAY SBI PORTB,5 CALL DELAY JMP AGAIN DELAY:\tLDI R16,0X00 OUT TCNT0,R16 LDI R17,0X00 OUT TCCR0A,R17 LDI R18,0X01 OUT TCCR0B,R18 ; START TIMER HERE: IN R20,TIFR0 SBRS R20,0 ; R20(0) == 1 OR 0 CHECK BITS WITH TIFR0 POSITION Skip if Bit in Register is Set RJMP HERE LDI R20,0X0 OUT TCCR0B,R20 LDI R20,(1\u0026lt;\u0026lt;TOV0) OUT TIFR0,R20 ;TOV0 is cleared by writing a logic one to the flag RET interrupt programming\ntimer 0 in interrupt mode\nnote:timer 0 overflow vector should be placed in 0x0020\n.include \u0026#34;m328pdef.inc\u0026#34; .MACRO INITSTACK LDI R20,HIGH(RAMEND) OUT SPH,R20 LDI R20,LOW(RAMEND) OUT SPL,R20 .ENDMACRO ;timer 0 interrupt .ORG 00 JMP MAIN .ORG 0X020 JMP TIM_OVF_ISR .ORG 0X50 TIM_OVF_ISR: IN R18,PORTB LDI R17,(1\u0026lt;\u0026lt;5) EOR R18,R17 OUT PORTB,R18 RETI .ORG 0x200 MAIN:\tINITSTACK LDI R16,0X00 OUT PORTB,R16 CBI DDRB,5 CBI PORTB,5 ;TIMER 0 CONF OVF INTERRUPT ENABLE LDI R16,0X00 OUT TCNT0,R16 LDI R16,0X01 OUT TCCR0B,R16 ;START TIMER NO PRESCALAR LDI R17,(1\u0026lt;\u0026lt;TOIE0) STS TIMSK0,R17 ;ENABLE TIMER OVERFLOW INTERRUPT SEI LOOP: JMP LOOP REFERENCE : 1. TIMER APPLICATION NOTE\n2. AVR registers manual\n3. atmega328p\n","permalink":"http://localhost:1313/2022/10/02/avr-assembly-code/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2022/09/avr_assembly.png?w=1024\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSimple code example for load and add instruction:\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.equ sum = 0x30\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.org 00\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emain: ldi r16,0xFA ; hex value copy to r16\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eldi r17,$AB ; dollar sign to hex\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eldi r18,0b00001111 ; binary\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eadd r16,r17 ;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eadd r16,r17 result r16\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eldi r19,11 ; decimal 11\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ests sum,r16 ; save value to location 30h (sum is a pointer)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehere: jmp here\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2022/09/memory_avr.png?w=1024\"\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2022/09/avr_architecture.png?w=1002\"\u003e\u003c/p\u003e\n\u003cp\u003eAVR MCUs\u0026rsquo; are generally fast, they can execute 16MIPS at 16Mhz because of how the busses are designed and also the simplicity of RSIC architecture.\u003c/p\u003e","title":"AVR Assembly code"},{"content":"Stm32 is a widely popular MCU based on ARM core and I have always been fascinated to work with these tiny powerhouses! This post is a part of the custom PCB design build series and hopefully, I will keep posting about basic hardware design.\nSetup a KiCAD project as usual and we will start with the schematics then will check for parts (Do some initial research on main parts required , passive components can be selected later only the size selection matters at this stage).Add stm32f4xx schematic symbol (Its not difficult to make one if the symbol does not exist). Let us divide the whole schematic into multiple section :\n1. Power\n2. External Crystal Oscillator\n3. USB connector (Native USB support)\n4. Connectors for peripheral pins\nWe use the below two documentation from Stm32 as a reference\nAN4488 Application note Stm32f4xx Hardware design Guideline MCU specific datascheet , in my case its Stm32f4xx Datasheet 1. Power Section Mosfet is used to prevent reverse voltage protection while the ferrite bead helps to filter transient voltages . The schotky diode along with mosfet helps in switching between 5V usb line and 12 volt buck converter input.\nMp2359DJ is used as the buck converter IC that converts 12v to 3.3V for powering MCU and other components\n2. VDD / VSS capacitors\nBased on the documentation one 10u for overall VDD and 100nf for each VDD pins .VDDA required extra ferrite bead to get clean reference voltage.\n[ Remaining design portion coming soon™ ]\n","permalink":"http://localhost:1313/2022/09/29/1-stm32f4xx-custom-pcb-design-using-kicad-v6/","summary":"\u003cp\u003eStm32 is a widely popular MCU based on ARM core and I have always been fascinated to work with these tiny powerhouses! This post is a part of the custom PCB design build series and hopefully, I will keep posting about basic hardware design.\u003c/p\u003e\n\u003cp\u003eSetup a KiCAD project as usual and we will start with the schematics then will check for parts (Do some initial research on main parts required , passive components can be selected later only the size selection matters at this stage).Add stm32f4xx schematic symbol (Its not difficult to make one if the symbol does not exist). Let us divide the whole schematic into multiple section :\u003c/p\u003e","title":"[1] Stm32f4xx Custom PCB design using KiCAD v6"},{"content":"using sbit , reading a single pin and writing to output\n#include \u0026lt;reg51.h\u0026gt; sbit sw=P0^1; sbit led =P1^1; // gpio input / output void main(){ sw=1; while(1){ led=sw; } } Mini project: 8051 interfacing with four 7 segment leds , using a timer to count value every 1s\ncircuit: (made in proteus)\n7 segment leds are comman anode (active low) , decoder selects one 7 segment display at a time , p3.3 ,p3.4 are connected to decoder input , p2.0- p2.7 are used to write leds.\ncode:\n#include \u0026lt;reg51.h\u0026gt; //sbit should be declared globally //encoder input 00,01,10,11 --\u0026gt; led 0,1,2,3 --4 led 7 segment selector sbit d0 = P3 ^ 3; sbit d1 = P3 ^ 4; //Port 2 is 7 segment led data input unsigned char numbers[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90 }; enum segment { first, second, third, fourth }; unsigned char timer_count = 0; unsigned char digit1 = 0, digit2 = 0, digit3 = 0, digit4 = 0; void led_write(unsigned char segment, unsigned char number); void update_time() { int i = 0; led_write(first, numbers[digit4]); for (i = 0; i \u0026lt; 200; i++); led_write(second, numbers[digit3]); for (i = 0; i \u0026lt; 200; i++); led_write(third, numbers[digit2]); for (i = 0; i \u0026lt; 200; i++); led_write(fourth, numbers[digit1]); for (i = 0; i \u0026lt; 200; i++); } void timer0_isr() interrupt 1 { TH0 = 0x3c; TL0 = 0xB0; timer_count++; if (timer_count == 20) { timer_count = 0; digit1++; if (digit1 == 10) { digit1 = 0; digit2++; } if (digit2 == 10) { digit2 = 0; digit3++; } if (digit3 == 10) { digit3 = 0; digit4++; } if (digit4 == 10) { digit1 = 0; digit2 = 0; digit3 = 0; digit4 = 0; } } } void led_write(unsigned char segment, unsigned char number) { if (segment == 0) { d0 = 0; d1 = 0; } if (segment == 1) { d0 = 1; d1 = 0; } if (segment == 2) { d0 = 0; d1 = 1; } if (segment == 3) { d0 = 1; d1 = 1; } P2 = number; } void timer_init() { TMOD = 0x01; ET0 = 1; EA = 1; TH0 = 0x3c; TL0 = 0xB0; TR0 = 1; } void main() { timer_init(); while (1) { update_time(); } return; } ","permalink":"http://localhost:1313/2022/09/27/8051-embedded-c-code-keil-c51-ide/","summary":"\u003cp\u003e\u003cstrong\u003eusing sbit , reading a single pin and writing to output\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;reg51.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esbit sw\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eP0\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esbit led \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eP1\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// gpio input / output\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tsw\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tled\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003esw;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eMini project: 8051 interfacing with four 7 segment leds , using a timer to count value every 1s\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003ecircuit: (made in proteus)\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2022/09/screenshot-2022-09-21-154952.png?w=1024\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e7 segment leds are comman anode (active low) , decoder selects one 7 segment display at a time , p3.3 ,p3.4 are connected to decoder input , p2.0- p2.7 are used to write leds.\u003c/strong\u003e\u003c/p\u003e","title":"8051 - Embedded C Code (Keil C51 IDE)"},{"content":"Blink an led with delay\norg 00h main:\tmov A,#0FFh here:\tmov P1,A acall delay mov P1,#0FEH acall delay sjmp heredelay: mov R0,#0FH outer:\tmov R1,#0FH inner:\tDJNZ R1,inner DJNZ R0,outer Ret End up/ down counter \u0026ndash; use same program just inc or dec to get up/down\norg 00h main:\tmov A,#0FFh here: mov P1,A acall delay dec A sjmp here delay: mov R0,#0FH outer: mov R1,#0FH inner: DJNZ R1,inner DJNZ R0,outer Ret End Write \u0026lsquo;1\u0026rsquo; seven segment display\nORG 00h MAIN:\tSETB p0.7 ;make cs of decoder high SETB p3.3 SETB p3.4 mov A,#00000110b CPL A mov p1,A sjmp MAIN end Up counting with \u0026amp; segment display\nRefer these for RAM and ROM memory organisation in 8051 : link 1 link2\nrefer this link to know more about 7 segment led display\nORG 00h main: SETB p3.3 SETB p3.4 SETB P0.7 init:\tmov dptr,#LUT mov R0,#0AH loop:\tclr A MOVC A,@A+dptr mov p1,a inc dptr djnz R0,loop sjmp init delay: mov R0,#0FH outer: mov R1,#0FH inner: DJNZ R1,inner DJNZ R0,outer Ret ORG 0200hLUT: DB 0c0h,0f9h,0a4h,0b0h,99h,92h,82h,0f8h,80h,90h END Timer in polling method:\nUse this link or this as a reference, keep in mind there are two 16-bit (THx TLx) in 8051 which are set and controlled by 2 registers namely TMOD and TCON.\nTIMER MODE 0 (13 bit mode) MODE 0 is a 13 bit mode. In this mode the THx acts as an 8 bit timer \u0026amp; TLx acts as a 5 bit timer. The TLx counts up to 31 \u0026amp; then resets to 00 \u0026amp; increment THx by 1. Suppose you load 0 in the timer then the timer will overflow in 2^13 i.e. 8192 machine cycles.\nTIMER MODE 1 (16-bit mode) MODE 1 is similar to MODE 0 except it is a 16-bit mode. In this mode, the THx \u0026amp; TLx both acts as an 8-bit timer. The TLx counts up to 255 \u0026amp; then resets to 00 \u0026amp; increment THx by 1. Since this is a full 16-bit timer we can get a maximum of 2^16 i.e. 65536 Machine cycle before the timer overflows.\nTIMER MODE 2 (8-bit mode) In this Mode TLx acts as the timer \u0026amp; THx contains the Reload Value i.e. THx is loaded in TLx every time it overflows i.e. when TLx reaches 255 \u0026amp; is incremented then instead of resetting it to 0 it will be reset to the value stored in THx. This mode is very commonly used for generating baud rate used in serial communication.\nTIMER MODE 3 (Split Mode) Timer mode “3” is known as a split-timer mode. Timers 0 and 1 may be programmed to be in mode 0, 1, or 2 independently of a similar mode for the other timer. But in mode 3 the timers do not operate independently if mode 3 is chosen for timer 0. When Timer 0 is placed in mode 3, it essentially becomes two separate 8-bit timers. Timer 0 is TL0 and Timer 1 is TH0. Both timers count from 0 to 255 and overflow back to 0. All the bits that are related to Timer 1 will now be tied to TH0. Now placing timer 1 in mode 3 causes it to stop counting, the control bit TR1 and the Timer 1 flag TF1 are now used by timer 0. So even if you use Timer 1 in Mode 0, 1 or 2 you won’t be able to START or STOP the timer \u0026amp; no INTERRUPT will be generated by Timer 1. The real Timer 1 will be incremented every machine cycle no matter what.\nSteps to follow:(using mode 01 )\nConfigure TMOD load THx TLx with value for timer start timer using TCON keep checking timer Overflow flag and exit if Overflow clear overflow flag and timer using TCON, to start the timer repeat steps 2-5 assembly code:\norg 0000h main:\tacall timer_setup mov p1,#00h loop:\tacall blink sjmp loop blink:\tCPL P1.0 acall delay ret timer_setup:\tmov TMOD,#01h MOV TH0,#03CH MOV TL0,#0B0H ret delay:\tsetb tr0 ; start timer0 TR0 set here:\tJNB tf0,here ; loop if the falg is not set clr tr0 clr tf0 ret Counter in polling\nTo setup counter set C/t`= 1 , select appropriate mode and for counter 1, counter 0 the external pulses are taken from pins p3.5 p3.4 respectively.\nassembly code:\norg 0000h main:\tmov th0,#00h mov tl0,#00h mov tmod,#0feh setb p3.4 ;input setb tr0 here:\tjnb tf0,here clr tf0 clr tr0 end Interupts:\ntwo types internal/external, total 4 interrupts in 8051\nWe will use the external interrupt to do some basic testing\norg 0000h ljmp main org 0003h ljmp isr org 0060h isr:\tinc r3 reti main:\tsetb p3.2 setb p3.3 Mov IE,#81h mov r3,#00h here: mov p1,#00h acall delay mov p1,#0FFh sjmp here delay: mov r0,#0DEh mov r1,#0CDh loop1: dec r1 mov r0,#0DEh loop2: djnz r0,loop2 sjmp loop1\tend Timer in interrupt mode\norg 00h ; timer using interupt ljmp main org 000BH ljmp isr isr: clr tr0 mov th0,#03ch;load values to timer 0 mov tl0,#0b0h clr\ttf0 setb tr0 cpl p1.0 reti org 0200h main:\tmov tmod,#01h;configure timer 0 , 16bit mode mov IE,#082H ; enable all inetrrupts mov th0,#03ch;load values to timer 0 mov tl0,#0b0h mov p1,#00h mov tcon,#03h setb tr0 here:\tsjmp here end reference: datasheet\nReally good video explanation on basics of 8051 in Malayalam\nhttps://youtube.com/playlist?list=PLpOlX5FjW5ZBDciqyfzkmbK6USWAH-Q3D\nReally good videos on 8051 in English\nhttps://youtu.be/9hxhFqJWBZ8\n","permalink":"http://localhost:1313/2022/09/18/8051-assembly-code/","summary":"\u003cp\u003e\u003cstrong\u003eBlink an led with delay\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eorg 00h\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emain:\tmov A,#0FFh\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehere:\tmov P1,A\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eacall delay\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emov P1,#0FEH\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eacall delay\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esjmp heredelay:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emov R0,#0FH\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eouter:\tmov R1,#0FH\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einner:\tDJNZ R1,inner\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDJNZ R0,outer\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRet\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eEnd\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eup/ down counter \u0026ndash; use same program just inc or dec to get up/down\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         org 00h\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emain:\t mov A,#0FFh\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehere:    mov P1,A\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         acall delay\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         dec A\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         sjmp here\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edelay: mov R0,#0FH\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eouter: mov R1,#0FH\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einner: DJNZ R1,inner\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       DJNZ R0,outer\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       Ret\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       End\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eWrite \u0026lsquo;1\u0026rsquo; seven segment display\u003c/strong\u003e\u003c/p\u003e","title":"8051 assembly code(using edsim51/keil C51 IDE)"},{"content":"\nThe Yocto Project is an open-source project that delivers a set of tools that create operating system images for embedded Linux systems. The Yocto Project tools are based on the OpenEmbedded (OE) project, which uses the BitBake build tool, to construct complete Linux images. BitBake and OE are combined to form a reference build host known as Poky which includes the following core components. This video will help explain what it\u0026rsquo;s all about.\nUsing Ubuntu Linux base (use any as per your preference as long as you can satisfy the prerequisite packages)\ninstalling prerequisite packages:\n$ sudo apt update $ sudo apt install git git-lfs tar python3 python3-pip gcc $ sudo apt install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint xterm python3-subunit mesa-common-dev zstd liblz4-tool $ sudo pip3 install sphinx sphinx_rtd_theme pyyaml Create a working directory\n$ mkdir yocto $ cd yocto Download Poky and select the desired release\n$ git clone git://git.yoctoproject.org/poky $ cd poky $ git checkout -b kirkstone origin/kirkstone source the directory\n$ source oe-init-build-env build Adding recipes and layers to add rpi specific drivers and files(make sure you are in build directory that was newly created when you run source command).\n$ git clone git://git.openembedded.org/meta-openembedded -b kirkstone $ git clone git://git.yoctoproject.org/meta-raspberrypi -b kirkstone add these layers to the build:\n$ bitbake-layers add-layer ./meta-openembedded $ bitbake-layers add-layer ./meta-raspberrypi $ bitbake-layers add-layer ./meta-openembedded/meta-oe $ bitbake-layers add-layer ./meta-openembedded/meta-python $ bitbake-layers add-layer ./meta-openembedded/meta-networking $ bitbake-layers add-layer ./meta-openembedded/meta-multimedia make sure the layers are added using bitbake-layers command\n$ bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/amrith/yocto/poky/meta 5 meta-poky /home/amrith/yocto/poky/meta-poky 5 meta-yocto-bsp /home/amrith/yocto/poky/meta-yocto-bsp 5 meta-oe /home/amrith/yocto/poky/build/meta-openembedded/meta-oe 5 meta-multimedia /home/amrith/yocto/poky/build/meta-openembedded/meta-multimedia 5 meta-networking /home/amrith/yocto/poky/build/meta-openembedded/meta-networking 5 meta-python /home/amrith/yocto/poky/build/meta-openembedded/meta-python 5 meta-raspberrypi /home/amrith/yocto/poky/build/meta-raspberrypi 9 select whatever raspberry pi board image you want to build using the following\n$ cd meta-raspberrypi/conf/machine $ ls include raspberrypi0.conf raspberrypi3-64.conf raspberrypi4.conf raspberrypi.conf raspberrypi0-2w-64.conf raspberrypi0-wifi.conf raspberrypi3.conf raspberrypi-cm3.conf raspberrypi0-2w.conf raspberrypi2.conf raspberrypi4-64.conf raspberrypi-cm.conf Note down the above file name for the board without the .conf extension and add it to config file under poky/build/conf/local.conf\nSet machine name in local.conf , also enable uart logging\nMACHINE ??= \u0026#34;raspberrypi0-wifi\u0026#34; inside meta-raspberrypi/recipes-core/images you should be able to see some recipes for rpi, we are building rpi-test-image\n$ bitbake rpi-test-image --runall=fetch $ bitbake rpi-test-image Build takes few hours depending on the machine and network , so chill for few hours !\nIf the build is successful , you can find the image inside /yocto/poky/build/tmp/deploy/images/raspberrypi0-wifi/rpi-test-image-raspberrypi0-wifi.rpi-sdimg\nBurn the image to sd card using dd . follow below link for the tutorial on how to use dd\nhttps://osxdaily.com/2018/04/18/write-image-file-sd-card-dd-command-line/\nconnect usart pins to serial to USB converter like cp2102 and open your favourite serial monitor program .\n$picocom -b 115200 /dev/ttyUSB0 [ 18.354558] Bluetooth: BNEP socket layer initialized [ 18.379023] random: bluetoothd: uninitialized urandom read (4 bytes read) [ 18.554833] NET: Registered PF_ALG protocol family ...done. Starting Telephony daemon Starting Linux NFC daemon [ 19.284711] nfc: nfc_init: NFC Core ver 0.1 [ 19.294654] NET: Registered PF_NFC protocol family [ 19.464256] Bluetooth: RFCOMM TTY layer initialized [ 19.469284] Bluetooth: RFCOMM socket layer initialized [ 19.484303] Bluetooth: RFCOMM ver 1.11 Poky (Yocto Project Reference Distro) 4.0.2 raspberrypi0-wifi /dev/ttyS0 Configuring pi image and adding your own layer will be explained in part 2\u0026hellip;\nCredits:\n1.https://kickstartembedded.com/2021/12/19/yocto-part-1-a-definitive-introduction/\n2.https://tutorialadda.com/yocto/create-your-own-linux-image-for-the-raspberry-pi-board-using-yocto-project\n","permalink":"http://localhost:1313/2022/07/23/part-1-yocto-linux-build-for-raspberry-pi-zero-w/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2019/10/img_20191001_154014.jpg?w=750\"\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"http://yoctoproject.org\"\u003eYocto Project\u003c/a\u003e is an open-source project that delivers a set of tools that create operating system images for embedded Linux systems. The Yocto Project tools are based on the \u003ca href=\"http://www.openembedded.org/wiki/Main_Page\"\u003eOpenEmbedded\u003c/a\u003e (OE) project, which uses the BitBake build tool, to construct complete Linux images. BitBake and OE are combined to form a reference build host known as Poky which includes the following \u003ca href=\"https://wiki.yoctoproject.org/wiki/Core_Components\"\u003ecore components\u003c/a\u003e. This \u003ca href=\"https://www.youtube.com/watch?v=utZpKM7i5Z4\"\u003evideo\u003c/a\u003e will help explain what it\u0026rsquo;s all about.\u003c/p\u003e","title":"[Part-1] Yocto Linux Build for Raspberry pi zero w"},{"content":"Refer this blog for more information [credit to author]\nImportant registers for SPI\n1.SPCR – SPI Control Register\n2.SPSR – SPI Status Register\n3.SPDR – SPI Data Register\natmega328 to atmega328p communication using SPI:\nusing PB5,4,3,2 for SPI (arduino uno digital pins 13,12,11,10) SCK,MISO,MOSI,SS\nSPI master using atmega328\n#include \u0026lt;avr/io.h\u0026gt; #define F_CPU 16000000 UL#include \u0026lt;util/delay.h\u0026gt; void SPI_init() { //set gpio as input or output for each SPI pins PB5 SCK output, 4 MISO input, 3 MOSI output ,2 SS output DDRB |= (1 \u0026lt;\u0026lt; PB5) | (1 \u0026lt;\u0026lt; PB3) | (1 \u0026lt;\u0026lt; PB2); //output DDRB \u0026amp;= ~(1 \u0026lt;\u0026lt; PB4); PORTB |= (1 \u0026lt;\u0026lt; PB2); //write high to slave, low to send data SPCR = (1 \u0026lt;\u0026lt; SPR0) | (1 \u0026lt;\u0026lt; MSTR) | (1 \u0026lt;\u0026lt; SPE); // |(1\u0026lt;\u0026lt;SPIE);//Master mode f/16 prescale } void Master_send(unsigned char data) { //select slave PORTB \u0026amp;= ~(1 \u0026lt;\u0026lt; PB2); //write zero to ss volatile uint8_t spsr = SPSR; SPDR = data; while (!(SPSR \u0026amp; (1 \u0026lt;\u0026lt; SPIF))); //wait PORTB |= (1 \u0026lt;\u0026lt; PB2); } int main(void) { SPI_init(); while (1) { //do something Master_send(\u0026#39;a\u0026#39;); _delay_ms(2000); } } Code for Slave arduino:\n#include \u0026lt;avr/io.h\u0026gt; #define F_CPU 16000000 UL #include \u0026lt;util/delay.h\u0026gt; #include \u0026lt;avr/interrupt.h\u0026gt; #define BAUD 9600 #define BRC 103\t//9600baud void USART_init() { UBRR0H = (BRC \u0026gt;\u0026gt; 8); UBRR0L = BRC; UCSR0B |= (1 \u0026lt;\u0026lt; TXEN0) | (1 \u0026lt;\u0026lt; TXCIE0);\t//1 bit 8 bit data //TX setup UCSR0C |= (1 \u0026lt;\u0026lt; UCSZ01) | (1 \u0026lt;\u0026lt; UCSZ00); } void send_char(unsigned char data) { while (!(UCSR0A \u0026amp;(1 \u0026lt;\u0026lt; UDRE0))); UDR0 = data; } void SPI_init() { //set gpio as input or output for each SPI pins PB5 SCK input, 4 MISO output, 3 MOSI input ,2 SS input DDRB \u0026amp;= ~(1 \u0026lt;\u0026lt; PB5); DDRB \u0026amp;= ~(1 \u0026lt;\u0026lt; PB3); DDRB \u0026amp;= ~(1 \u0026lt;\u0026lt; PB2); DDRB |= (1 \u0026lt;\u0026lt; PB4); SPCR |= (1 \u0026lt;\u0026lt; SPE) | (1 \u0026lt;\u0026lt; SPR0); } int tmp; int main(void) { USART_init(); sei(); serialWrite(\u0026#34;Welcome to AVR\\n\u0026#34;); SPI_init(); int tmp; tmp = SPSR; serialWrite(\u0026#34;spi initialsed!\\n\u0026#34;); while (1) { while (!(SPSR \u0026amp;(1 \u0026lt;\u0026lt; SPIF))); send_char(SPDR); int tmp; tmp = SPSR; _delay_ms(1000); } } ","permalink":"http://localhost:1313/2022/07/08/7-serial-pheripheral-interfacespi-communication-using-atmega328-in-avr-c/","summary":"\u003cp\u003eRefer \u003ca href=\"https://maxembedded.com/2013/11/serial-peripheral-interface-spi-basics/\"\u003ethis\u003c/a\u003e blog for more information [credit to author]\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImportant registers for SPI\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e1.SPCR – SPI Control Register\u003c/p\u003e\n\u003cp\u003e2.SPSR – SPI Status Register\u003c/p\u003e\n\u003cp\u003e3.SPDR – SPI Data Register\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eatmega328 to atmega328p communication using SPI\u003c/strong\u003e:\u003c/p\u003e\n\u003cp\u003eusing PB5,4,3,2 for SPI (arduino uno digital pins 13,12,11,10) SCK,MISO,MOSI,SS\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2022/07/atmega328-pinout.png?w=541\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSPI master using atmega328\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;avr/io.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define F_CPU 16000000 UL#include \u0026lt;util/delay.h\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSPI_init\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e//set gpio as input or output for each SPI pins PB5 SCK output, 4 MISO input, 3 MOSI output ,2 SS output\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  DDRB \u003cspan style=\"color:#f92672\"\u003e|=\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e PB5) \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e PB3) \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e PB2); \u003cspan style=\"color:#75715e\"\u003e//output\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  DDRB \u003cspan style=\"color:#f92672\"\u003e\u0026amp;=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e PB4);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  PORTB \u003cspan style=\"color:#f92672\"\u003e|=\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e PB2); \u003cspan style=\"color:#75715e\"\u003e//write high to slave, low to send data\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  SPCR \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e SPR0) \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e MSTR) \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e SPE); \u003cspan style=\"color:#75715e\"\u003e// |(1\u0026lt;\u0026lt;SPIE);//Master mode f/16 prescale\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMaster_send\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e data) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e//select slave\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  PORTB \u003cspan style=\"color:#f92672\"\u003e\u0026amp;=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e PB2); \u003cspan style=\"color:#75715e\"\u003e//write zero to ss\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003evolatile\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euint8_t\u003c/span\u003e spsr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e SPSR;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  SPDR \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e data;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e(SPSR \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e SPIF))); \u003cspan style=\"color:#75715e\"\u003e//wait\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  PORTB \u003cspan style=\"color:#f92672\"\u003e|=\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e PB2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eSPI_init\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//do something\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eMaster_send\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e_delay_ms\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2000\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eCode for Slave arduino:\u003c/strong\u003e\u003c/p\u003e","title":"[7] Serial Pheripheral Interface(SPI) communication using atmega328 in AVR C"},{"content":"I am using LDR (light dependent resistor) to get analog values\nBelow is the explanation from datasheet regarding how to use registers to start one time conversion / free running mode.\nA single conversion is started by disabling the Power Reduction ADC bit, PRADC, in ”Minimizing Power Consumption” on page 51 by writing a logical zero to it and writing a logical one to the ADC Start Conversion bit ADSC. This bit stays high as long as the conversion is in progress and will be cleared by hardware when theconversion is completed. If a different data channel is selected while a conversion is in progress, the ADC will finish the current conversion before performing the channel change.\nAlternatively, a conversion can be triggered automatically by various sources. Auto Triggering is enabled by setting the ADC Auto Trigger Enable bit, ADATE in ADCSRA. The trigger source is selected by setting the ADC Trigger Select bits, ADTS in ADCSRB (See description of the ADTS bits for a list of the trigger sources). When a positive edge occurs on the selected trigger signal, the ADC prescaler is reset and a conversion is started.\nThis provides a method of starting conversions at fixed intervals. If the trigger signal still is set when the conversion completes, a new conversion will not be started. If another positive edge occurs on the trigger signal during conversion, the edge will be ignored. Note that an Interrupt Flag will be set even if the specific interrupt is\ndisabled or the Global Interrupt Enable bit in SREG is cleared. A conversion can thus be triggered without causing an interrupt. However, the Interrupt Flag must be cleared in order to trigger a new conversion at the next interrupt event.\nUsing the ADC Interrupt Flag as a trigger source makes the ADC start a new conversion as soon as the ongoing conversion has finished. The ADC then operates in Free Running mode, constantly sampling and updating the ADC Data Register. The first conversion must be started by writing a logical one to the ADSC bit in ADCSRA. In this mode the ADC will perform successive conversions independently of whether the ADC Interrupt Flag, ADIF is cleared or not. If Auto Triggering is enabled, single conversions can be started by writing ADSC in ADCSRA to one. ADSC can also be used to determine if a conversion is in progress. The ADSC bit will be read as one during a conversion,\nindependently of how the conversion was started.\n-atmega328 datasheet\nSingle trigger mode:\n#include \u0026lt;avr/io.h\u0026gt; #define F_CPU 16000000UL #include \u0026lt;avr/interrupt.h\u0026gt; #define BAUD 9600 #define BRC 103 //9600baud #define tx_buffer_size 128 char serialBuffer[tx_buffer_size]; uint8_t serialReadPosition=0; uint8_t serialWritePosition=0; void serialWrite(char c[]); void serialAppend(char c); #include \u0026lt;util/delay.h\u0026gt; #include \u0026lt;avr/interrupt.h\u0026gt; void ADCinit(){ ADMUX=0;ADCSRA=0;DIDR0=0; ADMUX =(1\u0026lt;\u0026lt;REFS0)|(1\u0026lt;\u0026lt;MUX1)|(1\u0026lt;\u0026lt;MUX0);//ADC3,AVCC ADCSRA =(1\u0026lt;\u0026lt;ADEN)|(1\u0026lt;\u0026lt;ADIE)|(1\u0026lt;\u0026lt;ADPS2)|(1\u0026lt;\u0026lt;ADPS1)|(1\u0026lt;\u0026lt;ADPS0); //enable ADC, enable interrupt DIDR0=(1\u0026lt;\u0026lt;ADC3D);//disable digital input mode adc3d ADCSRA |=(1\u0026lt;\u0026lt;ADSC);//start conversion } void serialAppend(char c){ serialBuffer[serialWritePosition]=c; serialWritePosition++; if(serialWritePosition\u0026gt;=tx_buffer_size){ serialWritePosition=0; } } void serialWrite(char c[]){ for(uint8_t i=0;i\u0026lt;strlen(c);i++){ serialAppend(c[i]); } if (UCSR0A \u0026amp; (1\u0026lt;\u0026lt;UDRE0)) { UDR0=0; } } void USART_init(){ UBRR0H = (BRC\u0026gt;\u0026gt;8); UBRR0L = BRC; UCSR0B|=(1\u0026lt;\u0026lt;TXEN0)|(1\u0026lt;\u0026lt;TXCIE0); //1 bit 8 bit data //TX setup UCSR0C |=(1\u0026lt;\u0026lt;UCSZ01)|(1\u0026lt;\u0026lt;UCSZ00); sei(); } void send_char(unsigned char data){ while (!(UCSR0A\u0026amp;(1\u0026lt;\u0026lt;UDRE0))); UDR0 =data; } int value=0; int main(void){ USART_init(); ADCinit(); ADCSRA |=(1\u0026lt;\u0026lt;ADSC); serialWrite(\u0026#34;Welcome to AVR\\n\u0026#34;); while(1){ char str[5]; itoa(value,str,10); serialWrite(str); serialWrite(\u0026#34;\\n\u0026#34;); ADCSRA |=(1\u0026lt;\u0026lt;ADSC); _delay_ms(1000); } return 0; } ISR(USART_TX_vect){ if(serialReadPosition!=serialWritePosition) { send_char(serialBuffer[serialReadPosition]); serialReadPosition++; } if(serialReadPosition\u0026gt;=tx_buffer_size) { serialReadPosition=0; } } ISR(ADC_vect){ value=ADC; } ","permalink":"http://localhost:1313/2022/07/04/6-analog-adcusart-using-avr-atmega328/","summary":"\u003cp\u003eI am using LDR (light dependent resistor) to get analog values\u003c/p\u003e\n\u003cp\u003eBelow is the explanation from datasheet regarding how to use registers to start one time conversion / free running mode.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA single conversion is started by disabling the Power Reduction ADC bit, PRADC, in ”Minimizing Power Consumption” on page 51 by writing a logical zero to it and writing a logical one to the ADC Start Conversion bit ADSC. This bit stays high as long as the conversion is in progress and will be cleared by hardware when theconversion is completed. If a different data channel is selected while a conversion is in progress, the ADC will finish the current conversion before performing the channel change.\u003cbr\u003e\nAlternatively, a conversion can be triggered automatically by various sources. Auto Triggering is enabled by setting the ADC Auto Trigger Enable bit, ADATE in ADCSRA. The trigger source is selected by setting the ADC Trigger Select bits, ADTS in ADCSRB (See description of the ADTS bits for a list of the trigger sources). When a positive edge occurs on the selected trigger signal, the ADC prescaler is reset and a conversion is started.\u003cbr\u003e\nThis provides a method of starting conversions at fixed intervals. If the trigger signal still is set when the conversion completes, a new conversion will not be started. If another positive edge occurs on the trigger signal during conversion, the edge will be ignored. Note that an Interrupt Flag will be set even if the specific interrupt is\u003cbr\u003e\ndisabled or the Global Interrupt Enable bit in SREG is cleared. A conversion can thus be triggered without causing an interrupt. However, the Interrupt Flag must be cleared in order to trigger a new conversion at the next interrupt event.\u003c/p\u003e","title":"[6] Analog (ADC)+USART using AVR (atmega328)"},{"content":"I am using a very simple buffer to keep characters so they are send when USART UDR0 is ready to transmit using an ISR\n#include \u0026lt;avr/io.h\u0026gt; #define F_CPU 16000000UL #include \u0026lt;avr/interrupt.h\u0026gt; #define BAUD 9600 #define BRC 103 //9600baud #define tx_buffer_size 128 char serialBuffer[tx_buffer_size]; uint8_t serialReadPosition=0; uint8_t serialWritePosition=0; void serialWrite(char c[]); void serialAppend(char c); #include \u0026lt;util/delay.h\u0026gt; #include \u0026lt;avr/interrupt.h\u0026gt; void serialAppend(char c){ serialBuffer[serialWritePosition]=c; serialWritePosition++; if(serialWritePosition\u0026gt;=tx_buffer_size){ serialWritePosition=0; } } void serialWrite(char c[]){ for(uint8_t i=0;i\u0026lt;strlen(c);i++){ serialAppend(c[i]); } if (UCSR0A \u0026amp; (1\u0026lt;\u0026lt;UDRE0)) { UDR0=0; } } void USART_init(){ UBRR0H = (BRC\u0026gt;\u0026gt;8); UBRR0L = BRC; UCSR0B|=(1\u0026lt;\u0026lt;TXEN0)|(1\u0026lt;\u0026lt;TXCIE0); //1 bit 8 bit data //TX setup UCSR0C |=(1\u0026lt;\u0026lt;UCSZ01)|(1\u0026lt;\u0026lt;UCSZ00); sei(); } void send_char(unsigned char data){ while (!(UCSR0A\u0026amp;(1\u0026lt;\u0026lt;UDRE0))); UDR0 =data; } int main(void){ USART_init(); while(1){ serialWrite(\u0026#34;Welcome to AVR\\n\u0026#34;); _delay_ms(1000); } return 0; } ISR(USART_TX_vect){ if(serialReadPosition!=serialWritePosition) { send_char(serialBuffer[serialReadPosition]); serialReadPosition++; } if(serialReadPosition\u0026gt;=tx_buffer_size) { serialReadPosition=0; } } ","permalink":"http://localhost:1313/2022/07/04/5-avr-c-usart-transmit-with-isr-using-atmega328/","summary":"\u003cp\u003eI am using a very simple buffer to keep characters so they are send when USART UDR0 is ready to transmit using an ISR\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;avr/io.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define F_CPU 16000000UL\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;avr/interrupt.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define BAUD 9600\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define BRC 103 \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e//9600baud\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define tx_buffer_size 128\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e serialBuffer[tx_buffer_size];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003euint8_t\u003c/span\u003e serialReadPosition\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003euint8_t\u003c/span\u003e serialWritePosition\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eserialWrite\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e c[]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eserialAppend\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e c);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;util/delay.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;avr/interrupt.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eserialAppend\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e c){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tserialBuffer[serialWritePosition]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ec;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tserialWritePosition\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(serialWritePosition\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003etx_buffer_size){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tserialWritePosition\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eserialWrite\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e c[]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003euint8_t\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(c);i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eserialAppend\u003c/span\u003e(c[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (UCSR0A \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eUDRE0))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tUDR0\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUSART_init\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eUBRR0H \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (BRC\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eUBRR0L \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e BRC;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eUCSR0B\u003cspan style=\"color:#f92672\"\u003e|=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eTXEN0)\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eTXCIE0); \u003cspan style=\"color:#75715e\"\u003e//1 bit 8 bit data\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//TX setup\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003eUCSR0C \u003cspan style=\"color:#f92672\"\u003e|=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eUCSZ01)\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eUCSZ00);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003esei\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esend_char\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e data){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e(UCSR0A\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eUDRE0)));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tUDR0 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003edata;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eUSART_init\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eserialWrite\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Welcome to AVR\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003e_delay_ms\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eISR\u003c/span\u003e(USART_TX_vect){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(serialReadPosition\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003eserialWritePosition)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003esend_char\u003c/span\u003e(serialBuffer[serialReadPosition]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tserialReadPosition\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(serialReadPosition\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003etx_buffer_size)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tserialReadPosition\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[5] AVR C USART transmit with ISR using atmega328"},{"content":"I found this wonderful article and another one that explains the theory of PWM and the waveform and where it\u0026rsquo;s used. Since I don\u0026rsquo;t think I can improve on that I will leave it there for reference.\nSummary of the above article [ for lazy people like me ;-) ] :\nAs the title suggests, there are three PWM modes: Fast PWM, phase correct PWM lastly frequency and phase correct PWM Using a sawtooth and TOP, MAX values pulse width gets manipulated It is used to control DC motor, servo motor etc FAST PWM Use any of the three timers for this purpose for hardware PWM generation . (software generation is another topic to be covered separately)\nI am using timer 1\n#include \u0026lt;avr/io.h\u0026gt; #include \u0026lt;avr/interrupt.h\u0026gt; //selecting OC1A PB1 --- Arduino digital pin 9 void init_pwm(){ TCCR1A |= (1\u0026lt;\u0026lt;COM1A1)|(1\u0026lt;\u0026lt;WGM10)|(1\u0026lt;\u0026lt;WGM11);\t//Clear OC1A/OC1B on Compare Match (Set output to low level). non inverting TCCR1B |=(1\u0026lt;\u0026lt; WGM12); //mode also use Fast PWM 10bit mode OCR1A = 0x1FF; //50 percent duty cycle TIMSK1|=(1\u0026lt;\u0026lt;TOIE1); sei(); //no prescaling value CS10=1 TCCR1B|=(1\u0026lt;\u0026lt;CS10); } int main(void){ DDRB|=(1\u0026lt;\u0026lt;PB5); //led DDRB|=(1\u0026lt;\u0026lt;PB1); //timer1 pb1 init_pwm(); while(1); return 0; } ISR(TIMER1_OVF_vect){ PORTB^=(1\u0026lt;\u0026lt;PB5); } 50 percent duty cycle fast PWM\nPhase correct PWM\ninorder to demonstrate phase correct PWM two PWM signals are generated\n#include \u0026lt;avr/io.h\u0026gt; #include \u0026lt;avr/interrupt.h\u0026gt; //selecting OC1A PB1 --- Arduino digital pin 9 void init_pwm(){ TCCR1A |= (1\u0026lt;\u0026lt;COM1A1)|(1\u0026lt;\u0026lt;COM1B1)|(1\u0026lt;\u0026lt;WGM10)|(1\u0026lt;\u0026lt;WGM11);\t//Clear OC1A/OC1B on Compare Match (Set output to low level). non inverting //TCCR1B |=(1\u0026lt;\u0026lt; WGM12); //mode also use Fast PWM 10bit mode OCR1A = 0x1FF; //50 percent duty cycle OCR1B = 0x342; TIMSK1|=(1\u0026lt;\u0026lt;TOIE1); sei(); //no prescaling value CS10=1 TCCR1B|=(1\u0026lt;\u0026lt;CS10); } int main(void){ DDRB|=(1\u0026lt;\u0026lt;PB5); //led DDRB|=(1\u0026lt;\u0026lt;PB1); //timer1 pb1 DDRB|=(1\u0026lt;\u0026lt;PB2); init_pwm(); while(1); return 0; } ISR(TIMER1_OVF_vect){ PORTB^=(1\u0026lt;\u0026lt;PB5); } ","permalink":"http://localhost:1313/2022/06/30/4-avr-c-pwm-fast-pwm-phase-correct-pwm-and-frequency-phase-correct-pwm/","summary":"\u003cp\u003eI found this wonderful \u003ca href=\"https://maxembedded.com/2011/08/avr-timers-pwm-mode-part-i/\"\u003earticle\u003c/a\u003e and \u003ca href=\"https://wolles-elektronikkiste.de/en/timer-and-pwm-part-2-16-bit-timer1\"\u003eanother\u003c/a\u003e one that explains the theory of PWM and the waveform and where it\u0026rsquo;s used. Since I don\u0026rsquo;t think I can improve on that I will leave it there for reference.\u003c/p\u003e\n\u003cp\u003eSummary of the above article [ for lazy people like me ;-) ] :\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAs the title suggests, there are three PWM modes: Fast PWM, phase correct PWM lastly frequency and phase correct PWM\u003c/li\u003e\n\u003cli\u003eUsing a sawtooth and TOP, MAX values pulse width gets manipulated\u003c/li\u003e\n\u003cli\u003eIt is used to control DC motor, servo motor etc\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"fast-pwm\"\u003eFAST PWM\u003c/h3\u003e\n\u003cp\u003eUse any of the three timers for this purpose for hardware PWM generation . (software generation is another topic to be covered separately)\u003c/p\u003e","title":"[4] AVR C PWM (fast PWM, phase correct PWM  )"},{"content":" set Timer Control register 1 (TCCR1B since WGM12 should be 1 for CTC) load the value to be compared in Overflow Compare register (OCR1A) enable interrupt for OCIE register using Timer1 Mask register (TIMSK1) enable register and set prescalar (1024 in the below example) use ISR #include \u0026lt;avr/io.h\u0026gt; #include \u0026lt;avr/interrupt.h\u0026gt; //timer 1 16 bit void timer_config(){ TCCR1B|=(1\u0026lt;\u0026lt;WGM12); //CTC mode OCR1A=15625; TIMSK1=(1\u0026lt;\u0026lt;OCIE1A); sei(); TCCR1B|=(1\u0026lt;\u0026lt;CS12)|(1\u0026lt;\u0026lt;CS10);//prescalar 1024 TCCR1B\u0026amp;=~(1\u0026lt;\u0026lt;CS11); } void led_config(){ //PB5 has led and logic analyser connected DDRB|=(1\u0026lt;\u0026lt;PB5); } int main(void){ led_config(); timer_config(); while(1){ } return 0; } ISR(TIMER1_COMPA_vect){ PORTB^=(1\u0026lt;\u0026lt;PB5); } use this online calculator for ticks calculations.\n","permalink":"http://localhost:1313/2022/06/27/3-avr-timer-16-bit-in-ctc-mode-timer-1-atmega328/","summary":"\u003col\u003e\n\u003cli\u003eset Timer Control register 1 (TCCR1B since WGM12 should be 1 for CTC)\u003c/li\u003e\n\u003cli\u003eload the value to be compared in Overflow Compare register (OCR1A)\u003c/li\u003e\n\u003cli\u003eenable interrupt for OCIE register using Timer1 Mask register (TIMSK1)\u003c/li\u003e\n\u003cli\u003eenable register and set prescalar (1024 in the below example)\u003c/li\u003e\n\u003cli\u003euse ISR\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;avr/io.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;avr/interrupt.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e//timer 1 16 bit\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etimer_config\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t TCCR1B\u003cspan style=\"color:#f92672\"\u003e|=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eWGM12); \u003cspan style=\"color:#75715e\"\u003e//CTC mode\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e \t OCR1A\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e15625\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \t TIMSK1\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eOCIE1A);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t \u003cspan style=\"color:#a6e22e\"\u003esei\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t TCCR1B\u003cspan style=\"color:#f92672\"\u003e|=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eCS12)\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eCS10);\u003cspan style=\"color:#75715e\"\u003e//prescalar 1024\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t TCCR1B\u003cspan style=\"color:#f92672\"\u003e\u0026amp;=~\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eCS11);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eled_config\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//PB5 has led and logic analyser connected\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tDDRB\u003cspan style=\"color:#f92672\"\u003e|=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003ePB5);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eled_config\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003etimer_config\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eISR\u003c/span\u003e(TIMER1_COMPA_vect){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePORTB\u003cspan style=\"color:#f92672\"\u003e^=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003ePB5);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2022/06/screenshot-from-2022-06-26-19-48-37.png?w=1024\"\u003e\u003c/p\u003e","title":"[3] AVR timer 16 bit in CTC mode - timer 1  atmega328"},{"content":"There is a TCNTn called timer/Counter Register for each of the timers in AVR. For example, In Atmega32 we have TCNT0, TCNT1 and TCNT2. The TCNTn is basically a counter. It counts up with each pulse. It contains zero when reset. We can read or load any value in the TCNTn register.Each of the timer has TOV called Time Overflow. The TOVn flag is set when the timer overflows, where ‘n’ is the any number of a timer.\nThese timers have also Timer/Counter Control Register. It is denoted as TCCRn. It is used for setting up the modes of the timer.Another register of the timer is OCRn which is named as “Output Compare register”. It is used as Compare match register. Here the contents of OCRn are compared with the contents of TCNTn.\nrefer this link to know more in detail or this\nAtmega328p is equipped with timer0, timer1, timer2; out of which two are 8-bits and one is 16-bit. Maximum number of clock ticks that a timer can count depends on the size of the register.\nTimer 0 and timer 2 use two different 8-bit registers, whereas timer 1 uses a 16-bit register.\nAn 8-bit register can count up to 2^8 = 256(0 to 255). Similarly 16-bit register can count up to 2^16 = 65536(0 to 65535). With the available resources, I can generate an interrupt at every (65536/clock freq) 65536/1,60,00,000 = 4.0959375ms.\nAn excellent video I found explaining the whole concept!\n\u0026amp;ab_channel=JoelCastillo\n#include \u0026lt;avr/io.h\u0026gt; #include \u0026lt;avr/interrupt.h\u0026gt; //using timer 0 for this example void timer_config(){ OCR0A= 194; //40 hz signal for N=1024 prescalar TCCR0A =(1\u0026lt;\u0026lt;WGM01); TIMSK0=(1\u0026lt;\u0026lt;OCIE0A); // Timer/Counter0 Compare Match A interrupt is enabled TCCR0B = (1\u0026lt;\u0026lt;CS02) | (1\u0026lt;\u0026lt;CS00) ; //CTC mode sei(); } void led_config(){ //PB5 led as output DDRB|=(1\u0026lt;\u0026lt;PB5); //set as output } int main(void){ led_config(); timer_config(); while(1){ //do nothing } } ISR(TIMER0_COMPA_vect){ PORTB^=(1\u0026lt;\u0026lt;PB5); } Above code when flashed generates 40hz (25ms,50% PWM wave) on PB5 which is also connected to LED, hence it shines a little brighter.Using Sigrok and Salaelogic analyser I was able to capture the signal. below is the screenshot for the same\npulseview+sigrok in ubuntu with salaelogic analyser\n","permalink":"http://localhost:1313/2022/06/26/2-avr-timer-counter-ctc-mode/","summary":"\u003cp\u003eThere is a TCNTn called timer/Counter Register for each of the timers in AVR. For example, In Atmega32 we have TCNT0, TCNT1 and TCNT2.  The TCNTn is basically a counter. It counts up with each pulse. It contains zero when reset. We can read or load any value in the TCNTn register.Each of the timer has TOV called Time Overflow. The TOVn flag is set when the timer overflows, where ‘n’ is the any number of a timer.\u003c/p\u003e","title":"[2] AVR timer/ counter -- CTC mode"},{"content":"\nThe Saleae Logic is an 8 channel 24MHz logic analyser. Soon after its launch people in China opened them up to find that they are pretty simple inside and, as sure as night follows day, little workshops in Shenzen started producing clones impossibly cheaply and to be sold through eBay, AliExpress, etc\nFollow this link for excellent instruction on other distros and requirements\nType the below command to check if the USB was connected successfully!\nsudo dmesg | tail To install Sigrok in ubuntu just do: (in case of any error use appimage , make sure your USB device have proper permission to be used else you cannot find it !)\nsudo apt install sigrok pulseview sudo pulseview or pulseview AppImage Sigrok provide AppImages (see appimage.org for details) for sigrok-cli and PulseView which make it very easy and convenient to use sigrok on somewhat recent Linux distributions (most distros newer than Ubuntu 16.04 LTS (Xenial Xerus) from around 2016 should work fine).\nAfter downloading the AppImage (see Downloads) you can run it by simply making it executable and executing it, for example:\n$ chmod u+x PulseView-NIGHTLY-x86_64.AppImage $ ./PulseView-NIGHTLY-x86_64.AppImage You might need to install the libsigrok udev rules files to be able to access some devices. See Cannot access USB / serial / other device for details.\n","permalink":"http://localhost:1313/2022/06/26/saleae-logic-analyser-clone-with-ubuntu-linux/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2022/06/screenshot-from-2022-06-26-13-51-46.png?w=1024\"\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"https://www.saleae.com/logic\"\u003eSaleae Logic\u003c/a\u003e is an 8 channel 24MHz logic analyser.  Soon after its launch people in China opened them up to find that they are pretty simple inside and, as sure as night follows day, little workshops in Shenzen started producing clones impossibly cheaply and to be sold through eBay, AliExpress, etc\u003c/p\u003e\n\u003cp\u003eFollow this \u003ca href=\"https://sigrok.org/wiki/Linux#Distribution_packages\"\u003elink\u003c/a\u003e for excellent instruction on other distros and requirements\u003c/p\u003e\n\u003cp\u003eType the below command to check if the USB was connected successfully!\u003c/p\u003e","title":"Saleae Logic Analyser Clone with Ubuntu Linux"},{"content":"For GPIO only these 3 registers are important for bit manipulation.\nFor each port there are three important registers:\nThe Data Direction Register (DDRx) determines whether the pins operate as inputs or outputs. The port output register (PORTx) determines the actual value set on each pin when it’s being used as an output. The port input register (PINx) is used for reading input values. x=B,C,D : example DDRB,DDRC,DDRD etc , PORTB,PORTC,PORTD etc , PINB,PINC,PIND etc.\nBlink.c\n#include \u0026lt;avr/io.h\u0026gt; /* Tells compiler the cpu speed to use for delays need to define it before importing util/delay.h otherwise define it with -DF_CPU=16000000UL during compilation */ #ifndef F_CPU #define F_CPU 16000000UL #endif #include \u0026lt;util/delay.h\u0026gt; /* PB5 has value of 5 */ #define LED PB5 #define SLEEP_MS 5000 // led is connected to PB5 int main(void) { /* initializing PB5 which is connected to port 13 of uno as output*/ DDRB |= (1\u0026lt;\u0026lt;LED); while (1) { /* toggling the PB5 to alternate between on-off state*/ PORTB ^= (1\u0026lt;\u0026lt;LED); _delay_ms(SLEEP_MS); } } Input using push button without any input pullup (debounce not implemented )\n//atmega328p + switch test without debounce //pd7 is the input switch //pb5 is the led #include \u0026lt;avr/io.h\u0026gt; #include \u0026lt;util/delay.h\u0026gt; #ifndef F_CPU #define F_CPU 16000000UL #endif #define LED PB5 #define SW PD7 int main(void){ DDRB |= (1\u0026lt;\u0026lt;LED); //output //pb5 set 1 output DDRD \u0026amp;= ~(1\u0026lt;\u0026lt;SW); //set 7th bit as input while(1){//main infinite loop if((PIND \u0026amp; (1\u0026lt;\u0026lt;SW))) { PORTB ^= (1\u0026lt;\u0026lt;LED); //toggle led _delay_ms(3000);// delay for doing blink on pushed } else PORTB \u0026amp;= ~(1\u0026lt;\u0026lt;LED); } return 0; } input pullup fo switch write 1 to the pin bit using PORTx=(1\u0026laquo;PIN)\n//atmega328p + switch test without debounce //pd7 is the input switch //pb5 is the led #include \u0026lt;avr/io.h\u0026gt; #include \u0026lt;util/delay.h\u0026gt; #ifndef F_CPU #define F_CPU 16000000UL #endif #define LED PB5 #define SW PD7 int main(void){ DDRB |= (1\u0026lt;\u0026lt;LED); //output //pb5 set 1 output DDRD \u0026amp;= ~(1\u0026lt;\u0026lt;SW); //set 7th bit as input PORTD |=(1\u0026lt;\u0026lt;SW); //turning on internal pullup while(1){//main infinite loop if((PIND \u0026amp; (1\u0026lt;\u0026lt;SW))==0)// button pressed { //blink led PORTB ^= (1\u0026lt;\u0026lt;LED); _delay_ms(3000); } else PORTB \u0026amp;= ~(1\u0026lt;\u0026lt;LED); } return 0; } ","permalink":"http://localhost:1313/2022/06/26/1-avr-8-bit-gpio/","summary":"\u003cp\u003eFor GPIO only these 3 registers are important for bit manipulation.\u003c/p\u003e\n\u003cp\u003eFor each port there are three important registers:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003cstrong\u003eData Direction Register (DDRx)\u003c/strong\u003e determines whether the pins operate as inputs or outputs.\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003eport output register (PORTx)\u003c/strong\u003e determines the actual value set on each pin when it’s being used as an output.\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003eport input register (PINx)\u003c/strong\u003e is used for reading input values.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ex=B,C,D : example DDRB,DDRC,DDRD etc , PORTB,PORTC,PORTD etc , PINB,PINC,PIND etc.\u003c/p\u003e","title":"[1] AVR 8 bit  - GPIO"},{"content":"simple hello world program for atmega328*:\n#include \u0026lt;avr/io.h\u0026gt; #include \u0026lt;util/delay.h\u0026gt; /* Tells compiler the cpu speed to use for delays need to define it before importing util/delay.h otherwise define it with -DF_CPU=16000000UL during compilation */ #ifndef F_CPU #define F_CPU 16000000UL #endif /* PB5 has value of 5 */ #define LED PB5 #define SLEEP_MS 500 int main(void) { /* initializing PB5 which is connected to port 13 of uno as output*/ DDRB |= (1\u0026lt;\u0026lt;LED); while (1) { /* toggling the PB5 to alternate between on-off state*/ PORTB ^= (1\u0026lt;\u0026lt;LED); _delay_ms(SLEEP_MS); } } compiling using avr-gcc cli: avr gcc flags\navr-gcc -g -Os -mmcu=atmega328 -c demo.c avr-gcc -g -mmcu=atmega328 -o demo.elf demo.o avr-objcopy -O ihex -R .eeprom demo.elf demo.hex flashing .hex file: usbasp is the programmer used!\navrdude -c usbasp -p atmega328 -U flash:w:demo.hex To automate the whole process lets write a make file! example : avrfreaks\nmakefile (updated on jul 4 2022)\nFILENAME = blink PROGRAMMER = usbasp DEVICE = atmega328 COMMAND = avr-gcc -Wall -g -Os -mmcu=${DEVICE} -D_CPU=16000000 default: compile upload clean compile: ${COMMAND} -c ${FILENAME}.c -o ${FILENAME}.o ${COMMAND} -o ${FILENAME}.elf ${FILENAME}.o avr-objcopy -R .eeprom -O ihex ${FILENAME}.elf ${FILENAME}.hex avr-size --format=avr --mcu=${DEVICE} ${FILENAME}.elf upload: avrdude -v -p ${DEVICE} -c ${PROGRAMMER} -P ${PORT} -b ${BAUD} -U flash:w:${FILENAME}.hex:i clean: rm *.o rm *.elf rm *.hex ","permalink":"http://localhost:1313/2022/06/25/avr-gcc-avrdude-flashing-using-cli-makefile-example-included/","summary":"\u003cp\u003esimple hello world program for atmega328*:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;avr/io.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;util/delay.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/*\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003eTells compiler the cpu speed to use for delays\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003eneed to define it before importing util/delay.h\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003eotherwise define it with -DF_CPU=16000000UL during compilation\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#ifndef F_CPU\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define F_CPU 16000000UL\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#endif\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e/* PB5 has value of 5 */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define LED       PB5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define SLEEP_MS  500\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/* initializing PB5 which is connected to port 13 of uno as output*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DDRB \u003cspan style=\"color:#f92672\"\u003e|=\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eLED);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e/* toggling the PB5 to alternate between on-off state*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        PORTB \u003cspan style=\"color:#f92672\"\u003e^=\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003eLED);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003e_delay_ms\u003c/span\u003e(SLEEP_MS);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ecompiling using avr-gcc cli: \u003ca href=\"https://www.nongnu.org/avr-libc/user-manual/group__demo__project.html\"\u003eavr gcc flags\u003c/a\u003e\u003c/p\u003e","title":"AVR GCC AVRdude flashing using CLI (makefile example included)"},{"content":"\nInstallation : follow the instruction: https://docs.ros.org/en/humble/Installation/Alternatives/Ubuntu-Development-Setup.html\nCreating a workspace:\nmkdir -p ros2_ws/src \u0026amp;\u0026amp; cd ros2_ws colcon build source install/local_setup.bash \u0026amp;\u0026amp; source install/setup.bash Creating a package:(Python based)\nament_python should have the following dir structure\n. └── my_project ├── CMakeLists.txt ├── package.xml └── my_project ├── __init__.py └── my_script.py cd ros2_ws/src ros2 pkg create \u0026lt;pkg-name\u0026gt; --dependencies [deps] --build-type ament_python cd ros2_demo_py/ rm CMakeLists.txt touch setup.py setup.cfg setup.cfg should have:\n[develop] script_dir=$base/lib/\u0026lt;package-name\u0026gt; [install] install_scripts=$base/lib/\u0026lt;package-name\u0026gt; setup.py should have:\nimport os from glob import glob from setuptools import setup package_name = \u0026#39;my_package\u0026#39; setup( name=package_name, version=\u0026#39;0.0.0\u0026#39;, # Packages to export packages=[package_name], # Files we want to install, specifically launch files data_files=[ # Install marker file in the package index (\u0026#39;share/ament_index/resource_index/packages\u0026#39;, [\u0026#39;resource/\u0026#39; + package_name]), # Include our package.xml file (os.path.join(\u0026#39;share\u0026#39;, package_name), [\u0026#39;package.xml\u0026#39;]), # Include all launch files. (os.path.join(\u0026#39;share\u0026#39;, package_name, \u0026#39;launch\u0026#39;), glob(os.path.join(\u0026#39;launch\u0026#39;, \u0026#39;*.launch.py\u0026#39;))), ], # This is important as well install_requires=[\u0026#39;setuptools\u0026#39;], zip_safe=True, author=\u0026#39;ROS 2 Developer\u0026#39;, author_email=\u0026#39;ros2@ros.com\u0026#39;, maintainer=\u0026#39;ROS 2 Developer\u0026#39;, maintainer_email=\u0026#39;ros2@ros.com\u0026#39;, keywords=[\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;], classifiers=[ \u0026#39;Intended Audience :: Developers\u0026#39;, \u0026#39;License :: TODO\u0026#39;, \u0026#39;Programming Language :: Python\u0026#39;, \u0026#39;Topic :: Software Development\u0026#39;, ], description=\u0026#39;My awesome package.\u0026#39;, license=\u0026#39;TODO\u0026#39;, # Like the CMakeLists add_executable macro, you can add your python # scripts here. entry_points={ \u0026#39;console_scripts\u0026#39;: [ \u0026#39;my_script = my_package.my_script:main\u0026#39; ], }, ) __init__.py can be empty follow this link to learn more\npackage.xml should have :\n\u0026lt;buildtool_depend\u0026gt;ament_cmake_python\u0026lt;/buildtool_depend\u0026gt; CMakeLists.txt should have:\nfind_package(ament_cmake_python REQUIRED) # ... ament_python_install_package(${PROJECT_NAME}) build package:\ncd ros2_ws colcon build --symlink-install source install/setup.bash run the package:\nros2 run \u0026lt;package name\u0026gt; \u0026lt;name of script in setup.py\u0026gt; creating launch file:\nmkdir launch touch launch/launch.py launch.py\nfrom launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description(): return LaunchDescription([ Node( package=\u0026#39;turtlesim\u0026#39;, namespace=\u0026#39;turtlesim1\u0026#39;, executable=\u0026#39;turtlesim_node\u0026#39;, name=\u0026#39;sim\u0026#39; ), Node( package=\u0026#39;turtlesim\u0026#39;, namespace=\u0026#39;turtlesim2\u0026#39;, executable=\u0026#39;turtlesim_node\u0026#39;, name=\u0026#39;sim\u0026#39; ), Node( package=\u0026#39;turtlesim\u0026#39;, executable=\u0026#39;mimic\u0026#39;, name=\u0026#39;mimic\u0026#39;, remappings=[ (\u0026#39;/input/pose\u0026#39;, \u0026#39;/turtlesim1/turtle1/pose\u0026#39;), (\u0026#39;/output/cmd_vel\u0026#39;, \u0026#39;/turtlesim2/turtle1/cmd_vel\u0026#39;), ] ) ]) add dependency to package.xml\n\u0026lt;exec_depend\u0026gt;ros2launch\u0026lt;/exec_depend\u0026gt; cd launch ros2 launch launch.py ","permalink":"http://localhost:1313/2022/06/24/ros2-humble-hawksbill-notes/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2022/06/humble-small.png?w=150\"\u003e\u003c/p\u003e\n\u003cp\u003eInstallation : follow the instruction: \u003ca href=\"https://docs.ros.org/en/humble/Installation/Alternatives/Ubuntu-Development-Setup.html\"\u003ehttps://docs.ros.org/en/humble/Installation/Alternatives/Ubuntu-Development-Setup.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCreating a workspace:\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir -p ros2_ws/src \u0026amp;\u0026amp; cd ros2_ws\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecolcon build\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esource install/local_setup.bash \u0026amp;\u0026amp; source install/setup.bash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eCreating a package:\u003c/strong\u003e(Python based)\u003c/p\u003e\n\u003cp\u003eament_python should have the following dir structure\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e└── my_project\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ├── CMakeLists.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ├── package.xml\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    └── my_project\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ├── __init__.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        └── my_script.py\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd ros2_ws/src\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eros2 pkg create \u0026lt;pkg-name\u0026gt; --dependencies [deps] --build-type ament_python\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd ros2_demo_py/\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erm CMakeLists.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etouch setup.py setup.cfg\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003esetup.cfg should have:\u003c/p\u003e","title":"ROS2 HUMBLE HAWKSBILL NOTES"},{"content":"I had asus a17 ryzen 7 rtx3050 unfortunately after a while nvidia control panel was showing no graphics detected !\nsolution:\nopen asus \u0026ldquo;Armoury Crate software\u0026rdquo;\ngoto system\u0026gt; profile and change eco mode to standard mode or any other performance mode\nnow reintall nvidia graphics driver and check device manager . All should be working fine!\ndamn asus\n","permalink":"http://localhost:1313/2022/06/21/nvidia-graphics-not-detected-device-manager-doesnt-show-on-ausus-gaming-laptop-solution/","summary":"\u003cp\u003eI had asus a17 ryzen 7 rtx3050 unfortunately after a while nvidia control panel was showing no graphics detected !\u003c/p\u003e\n\u003cp\u003esolution:\u003c/p\u003e\n\u003cp\u003eopen asus \u0026ldquo;Armoury Crate software\u0026rdquo;\u003c/p\u003e\n\u003cp\u003egoto system\u0026gt; profile and change eco mode to standard mode or any other performance mode\u003c/p\u003e\n\u003cp\u003enow reintall nvidia graphics driver and check device manager . All should be working fine!\u003c/p\u003e\n\u003cp\u003edamn asus\u003c/p\u003e","title":"NVIDIA graphics not detected / device manager doesnt show on asus gaming laptop solution"},{"content":"https://www.ros.org/\npersonal notes while learning ROS2\nROS1 installation:\nUsing Ubuntu as a base operating system, follow the installation guide on ROS wiki\nROS1 Workspaces:\nCatkin is a build system used to make workspaces, packages and libraries for ROS\nTo create a new workspace:\n$ mkdir -p ~/catkin_ws/src $ cd ~/catkin_ws/ $ catkin_init_workspace $ catkin_make or $ catkin build use this cheatsheet to refer catkin commands\nanother interesting gist that has a summary of commands\nsource devel/setup.bash after making a new workspace, also after creating a new package\nCreate a package:\n$ cd ~/catkin_ws/src $ catkin_create_pkg beginner_tutorials std_msgs rospy roscpp catkin_create_pkg \u0026lt;pkg_name\u0026gt; [\u0026lt;depend_pkg_1\u0026gt; \u0026lt;depend_pkg_2\u0026gt; ...]\nBuild a package:\nsource setup.bash and from your workspace run\n# In a catkin workspace $ catkin_make $ catkin_make install # (optionally) helpful websites:\nhttp://wiki.ros.org/ROS/Tutorials\nvideo tutorials:\n\u0026amp;list=PLE-BQwvVGf8HOvwXPgtDfWoxd4Cc6ghiP\u0026amp;ab_channel=RoboticSystemsLab%3ALeggedRoboticsatETHZ%C3%BCrich\nyoutube playlist: https://www.youtube.com/watch?v=0BxVPCInS3M\u0026amp;list=PLE-BQwvVGf8HOvwXPgtDfWoxd4Cc6ghiP\u0026amp;ab_channel=RoboticSystemsLab%3ALeggedRoboticsatETHZ%C3%BCrich\n","permalink":"http://localhost:1313/2022/06/21/ros-2-notes/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2022/06/screenshot-from-2022-06-21-08-45-12.png?w=1024\"\u003e\u003ca href=\"https://www.ros.org/\"\u003ehttps://www.ros.org/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003epersonal notes while learning ROS2\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eROS1 installation\u003c/strong\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUsing Ubuntu as a base operating system, follow the installation guide on \u003ca href=\"http://wiki.ros.org/ROS/Installation\"\u003eROS wiki\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eROS1 Workspaces\u003c/strong\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCatkin is a build system used to make workspaces, packages and libraries for ROS\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cem\u003eTo create a new workspace:\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ mkdir -p ~/catkin_ws/src\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ cd ~/catkin_ws/\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ catkin_init_workspace\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ catkin_make\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eor\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ catkin build\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003euse \u003ca href=\"https://catkin-tools.readthedocs.io/en/latest/cheat_sheet.html\"\u003ethis\u003c/a\u003e cheatsheet to refer catkin commands\u003c/p\u003e\n\u003cp\u003eanother interesting \u003ca href=\"https://gist.github.com/sytrus-in-github/5fae81ead75ad27c1220bd4ec499e36b\"\u003egist\u003c/a\u003e that has a summary of commands\u003c/p\u003e","title":"ROS 1 notes"},{"content":"Yocto project logo . Source: Wikipedia\nUsing Ubuntu /Popos as a development machine\nInstall required packages for Ubuntu/Debian-based Linux\nsudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping libsdl1.2-dev xterm sudo apt install -y zstd liblz4-tool Download poky build system source from git\ngit clone git://git.yoctoproject.org/poky cd into poky directory and run the init command\nsource oe-init-build-env build-qemux86 the directory is switched to build-qemux86 (else cd into build-qemux86). Check the configuration file and set the machine to qemux86 (or qemux86-64 for 64bit)\ncd build-qemux86 vim conf/local.conf MACHINE ??= \u0026#34;qemux86\u0026#34; Start qemu image build using below command\nbitbake core-image-minimal The above build process will download 1.5Gb-2Gb source code and build tools in parallel. This might take time depending on your PC\nTo build a GUI X11 based with very minimal controls for your Yocto image do the following:\nbitbake core-image-sato more to come do follow to keep updated\u0026hellip; :-)\n","permalink":"http://localhost:1313/2022/06/16/yocto-linux-qemu-build-basics/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2022/06/yocto_project_logo.svg_.png?w=1024\"\u003eYocto project logo . Source: Wikipedia\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eUsing Ubuntu /Popos as a development\u003c/em\u003e machine\u003c/p\u003e\n\u003cp\u003eInstall required packages for Ubuntu/Debian-based Linux\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eget install gawk wget git\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ecore diffstat unzip texinfo gcc\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003emultilib build\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eessential chrpath socat cpio python3 python3\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003epip python3\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003epexpect xz\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eutils debianutils iputils\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eping libsdl1\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003edev xterm\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt install \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ey zstd liblz4\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDownload poky build system source from git\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone git://git.yoctoproject.org/poky\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ecd into poky directory and run the init command\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esource oe-init-build-env build-qemux86\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ethe directory is switched to build-qemux86 (else cd into build-qemux86). Check the configuration file and set the machine to qemux86 (or qemux86-64 for 64bit)\u003c/p\u003e","title":"Yocto Linux Qemu build basics"},{"content":" ","permalink":"http://localhost:1313/","summary":"\u003chr\u003e","title":"Amrith's Blog"},{"content":"Let\u0026rsquo;s talk 👋 Don\u0026rsquo;t hesitate to reach out with the contact information below, or send a message using the form.\nor\nhttps://www.linkedin.com/in/amrithhn/\nSend me a message ","permalink":"http://localhost:1313/contact/","summary":"\u003cp\u003eLet\u0026rsquo;s talk 👋 Don\u0026rsquo;t hesitate to reach out with the contact information below, or send a message using the form.\u003c/p\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.linkedin.com/in/amrithhn/\"\u003ehttps://www.linkedin.com/in/amrithhn/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"send-me-a-message\"\u003eSend me a message\u003c/h2\u003e","title":"Contact me"},{"content":"I am an electronics engineer and a robotics enthusiast. Building stuff makes me happy and nothing can satisfy the outcome of a well-designed system that works without an issue.\nlearn more about me: https://www.linkedin.com/in/amrithhn/\nneed to work on any electronics project/robotics / prototype? contact me on Upwork\nhttps://www.upwork.com/freelancers/~011d6a3aef9611afcd\n","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003eI am an electronics engineer and a robotics enthusiast. Building stuff makes me happy and nothing can satisfy the outcome of a well-designed system that works without an issue.\u003c/p\u003e\n\u003cp\u003elearn more about me: \u003ca href=\"https://www.linkedin.com/in/amrithhn/\"\u003ehttps://www.linkedin.com/in/amrithhn/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eneed to work on any electronics project/robotics / prototype? contact me on Upwork\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.upwork.com/freelancers/~011d6a3aef9611afcd\"\u003ehttps://www.upwork.com/freelancers/~011d6a3aef9611afcd\u003c/a\u003e\u003c/p\u003e","title":"About"},{"content":"code:\n/** ****************************************************************************** * @file : main.c * @author : Auto-generated by STM32CubeIDE * @brief : Main program body ****************************************************************************** * @attention * * \u0026lt;h2\u0026gt;\u0026lt;center\u0026gt;© Copyright (c) 2020 STMicroelectronics. * All rights reserved.\u0026lt;/center\u0026gt;\u0026lt;/h2\u0026gt; * * This software component is licensed by ST under BSD 3-Clause license, * the \u0026#34;License\u0026#34;; You may not use this file except in compliance with the * License. You may obtain a copy of the License at: * opensource.org/licenses/BSD-3-Clause * ****************************************************************************** */ #if !defined(__SOFT_FP__) \u0026amp;\u0026amp; defined(__ARM_FP) #warning \u0026#34;FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use.\u0026#34; #endif #define rcc 0x40023800UL #define rcc_cr_offset 0x00U #define rcc_cfgr_offset 0x08U #define rcc_cr (rcc+rcc_cr_offset) #define rcc_cfgr (rcc+rcc_cfgr_offset) #include \u0026#34;stdint.h\u0026#34; int main(void) { uint32_t *rccCR= (uint32_t *)rcc_cr; uint32_t *rccCfgr=(uint32_t *)rcc_cfgr; *rccCR|=(1\u0026lt;\u0026lt;16);//set 16 bit hseon while(!(*rccCR \u0026amp; (1\u0026lt;\u0026lt;17)) ); *rccCfgr |=(0\u0026lt;\u0026lt;1);//0 bit set *rccCfgr \u0026amp;=~(1\u0026lt;\u0026lt;1);//1 bit reset //mc01 *rccCfgr \u0026amp;= ~(0x03\u0026lt;\u0026lt;21);//reset 22 21 bits *rccCfgr |=(1\u0026lt;\u0026lt;22); //set 22 bit /* Loop forever */ for(;;); } ","permalink":"http://localhost:1313/2020/10/09/stm32f407vg-disc1-clock-configuration-hse/","summary":"\u003cp\u003ecode:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e ******************************************************************************\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @file           : main.c\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @author         : Auto-generated by STM32CubeIDE\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @brief          : Main program body\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e ******************************************************************************\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @attention\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * \u0026lt;h2\u0026gt;\u0026lt;center\u0026gt;© Copyright (c) 2020 STMicroelectronics.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * All rights reserved.\u0026lt;/center\u0026gt;\u0026lt;/h2\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * This software component is licensed by ST under BSD 3-Clause license,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * the \u0026#34;License\u0026#34;; You may not use this file except in compliance with the\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * License. You may obtain a copy of the License at:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e *                        opensource.org/licenses/BSD-3-Clause\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e ******************************************************************************\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#if !defined(__SOFT_FP__) \u0026amp;\u0026amp; defined(__ARM_FP)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  #warning \u0026#34;FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use.\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#endif\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#define rcc 0x40023800UL\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#define rcc_cr_offset 0x00U\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#define rcc_cfgr_offset 0x08U\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#define rcc_cr (rcc+rcc_cr_offset)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#define rcc_cfgr (rcc+rcc_cfgr_offset)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#include \u0026#34;stdint.h\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eint main(void)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tuint32_t *rccCR= (uint32_t *)rcc_cr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tuint32_t *rccCfgr=(uint32_t *)rcc_cfgr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t*rccCR|=(1\u0026lt;\u0026lt;16);//set 16 bit hseon\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\twhile(!(*rccCR \u0026amp; (1\u0026lt;\u0026lt;17)) );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t*rccCfgr |=(0\u0026lt;\u0026lt;1);//0 bit set\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t*rccCfgr \u0026amp;=~(1\u0026lt;\u0026lt;1);//1 bit reset\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e //mc01\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t*rccCfgr \u0026amp;= ~(0x03\u0026lt;\u0026lt;21);//reset 22 21 bits\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t*rccCfgr |=(1\u0026lt;\u0026lt;22); //set 22 bit\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t/* Loop forever */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tfor(;;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"stm32f407vg-disc1 -clock configuration hse"},{"content":"IDE used:\nstm32 Cube IDE official\nstep1 \u0026gt; crete new project \u0026gt; c program and dont select stm32 project under type\ntypes of clock:\nHSI- high speed internal HSE- high speed external PLL- phase locked loop HSI 16MHZ setup without pll\ncode:\n/** @file : main.c @author : Auto-generated by STM32CubeIDE @brief : Main program body @attention * © Copyright (c) 2020 STMicroelectronics. All rights reserved. * This software component is licensed by ST under BSD 3-Clause license, the \u0026#34;License\u0026#34;; You may not use this file except in compliance with the License. You may obtain a copy of the License at: opensource.org/licenses/BSD-3-Clause * */ if !defined(SOFT_FP) \u0026amp;\u0026amp; defined(__ARM_FP) #warning \u0026#34;FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use.\u0026#34; endif include \u0026#34;stdint.h\u0026#34; define rcc_base_addr 0x40023800UL define rcc_cr_offset 0x00U define rcc_cfgr_offset 0x08U define rcc_cr (rcc_base_addr+rcc_cr_offset) define rcc_cfgr (rcc_base_addr+rcc_cfgr_offset) int main(void) { //1. set rcc_cr hsion (bit 0) uint32_t *rcccrreg = (uint32_t *)rcc_cr; uint32_t *rcccfgrreg = (uint32_t *)rcc_cfgr; *rcccrreg |=(0x01\u0026lt;\u0026lt;0); //set hsion 0bit *rcccfgrreg \u0026amp;=~(0x03\u0026lt;\u0026lt;21); //21 and 22 bit rcc_cfgr reset /* Loop forever */ for(;;); } ","permalink":"http://localhost:1313/2020/10/09/stm32f407vg-disc1-board-clock-configuration-from-scratch/","summary":"\u003cp\u003e\u003cstrong\u003eIDE used\u003c/strong\u003e:\u003c/p\u003e\n\u003cp\u003estm32 Cube IDE official\u003c/p\u003e\n\u003cp\u003estep1 \u0026gt; crete new project \u0026gt; c program and dont select stm32 project under type\u003c/p\u003e\n\u003cp\u003etypes of clock:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eHSI- high speed internal\u003c/li\u003e\n\u003cli\u003eHSE- high speed external\u003c/li\u003e\n\u003cli\u003ePLL- phase locked loop\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHSI 16MHZ setup without pll\u003c/p\u003e\n\u003cp\u003ecode:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@file : main.c\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@author : Auto-generated by STM32CubeIDE\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@brief : Main program body\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@attention\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e© Copyright (c) 2020 STMicroelectronics.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAll rights reserved.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThis software component is licensed by ST under BSD 3-Clause license,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ethe \u0026#34;License\u0026#34;; You may not use this file except in compliance with the\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLicense. You may obtain a copy of the License at:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eopensource.org/licenses/BSD-3-Clause\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e*\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e*/\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eif !defined(SOFT_FP) \u0026amp;\u0026amp; defined(__ARM_FP)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#warning \u0026#34;FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use.\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eendif\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einclude \u0026#34;stdint.h\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edefine rcc_base_addr 0x40023800UL\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edefine rcc_cr_offset 0x00U\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edefine rcc_cfgr_offset 0x08U\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edefine rcc_cr (rcc_base_addr+rcc_cr_offset)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edefine rcc_cfgr (rcc_base_addr+rcc_cfgr_offset)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eint main(void)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//1. set rcc_cr hsion (bit 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euint32_t *rcccrreg = (uint32_t *)rcc_cr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euint32_t *rcccfgrreg = (uint32_t *)rcc_cfgr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e*rcccrreg |=(0x01\u0026lt;\u0026lt;0); //set hsion 0bit\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e*rcccfgrreg \u0026amp;=~(0x03\u0026lt;\u0026lt;21); //21 and 22 bit rcc_cfgr reset\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e/* Loop forever */ for(;;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Stm32f407vg-disc1 board -clock configuration (from scratch)"},{"content":"\nLately I was reading about embedded linux and came to know about two such custom embedded linux system build sytem the Yocto project and Buildroot.I wanted to make my own custom linux for raspberyy pi zero W i had in my *ahem* attic.\nRequirements:\nRaspberry pi zero w (ofcourse) A PC (with ubuntu 18.04 or higher) microSD card microSD card reader Step 1: Preparing and downloading BUILDROOT Open Ubuntu terminal (Ctrl+ALT+T) and type the below\n$ wget https://www.buildroot.org/downloads/buildroot-2019.08.tar.gz $ tar xvjf buildroot-2019.08.tar.gz $ cd buildroot-2019.08 Building Buildroot is now ready for initial configuration. There are few commands that can help:\n$ make help $ make list-defconfigs output:\nraspberrypi0_defconfig - Build for raspberrypi0 raspberrypi0w_defconfig - Build for raspberrypi0w raspberrypi2_defconfig - Build for raspberrypi2 raspberrypi3_64_defconfig - Build for raspberrypi3_64 raspberrypi3_defconfig - Build for raspberrypi3 raspberrypi3_qt5we_defconfig - Build for raspberrypi3_qt5we raspberrypi4_defconfig - Build for raspberrypi4 REAL FUN STARTS! Type inside terminal\n$ make raspberrypi0w_defconfig $ make all If there was no errors then continue editing the image to add wifi, bash , ssh, and whatever you need for your project.\n$ make menuconfig A small GUI pops up (should be in maximized terminal window), go through each sections . Use Y key to enable N to remove , press escape twice to go back or use exit option near the select option .\nTarget options \u0026ndash;\u0026gt; leave it default Build options \u0026ndash;\u0026gt; select enable compiler cache Toolchain \u0026ndash;\u0026gt; Enable wchar support System config -\u0026gt; change system hostname, system banner, root password , enable install timezone info Hardware Handling Hardware Handling -\u0026gt; Firmware -\u0026gt; rpi-wifi-firmware 6. Network applications\nNetworking applications -\u0026gt; wpa_supplicant Networking applications -\u0026gt; wpa_supplicant - Enable 80211 support Networking applications -\u0026gt; dropbear Networking applications -\u0026gt; openssh 7. Target Packages -\u0026gt; Shell and utilities\nTarget Packages -\u0026gt; Shell and utilities -\u0026gt;bash Also under System configuration -\u0026gt; under root password change shell to bash, also run getty login prompt after boot.\nFinally type the below code (fingers crossed!)\nmake all once you get no error in output , output image files will be under\nbuildroot/output/images/ sdcardimage.img will be your image to burn to sdcard for Raspberry pi zero w.\nEnabling Wi-Fi In this subsection, we enable the Wi-Fi interface of the Raspberry Pi Zero W, so it will be able connect to any Wi-Fi networks.\nwpa_supplicant Create a file, named interfaces in buildroot/board/raspberrypi/ (all the other raspberrypi* are symlinks to this folder). The auto wlan0 will make sure that wlan0 is started when ifup -a is run, wich is done by the init scripts.\nauto lo iface lo inet loopback auto eth0 iface eth0 inet dhcp pre-up /etc/network/nfs_check wait-delay 15 auto wlan0 iface wlan0 inet dhcp pre-up wpa_supplicant -D nl80211 -i wlan0 -c /etc/wpa_supplicant.conf -B post-down killall -q wpa_supplicant wait-delay 15 iface default inet dhcp Create another file, named wpa_supplicant.conf with wpa_passphrase in buildroot/board/raspberrypi/ (all the other raspberrypi* are symlinks to this folder). It should look like something like this:\nctrl_interface=/var/run/wpa_supplicant ap_scan=1 network={ ssid=\u0026#34;EDIT_THIS\u0026#34; psk=\u0026#34;EDIT_THIS\u0026#34; } ALSO\npost-build.sh\nThe hotplug helper must be set as mdev and write /etc/mdev.conf file. The mdev package itself has some helper script for this and can be used directly. Also the above created files must be copied, so add the following lines to buildroot/board/raspberrypi/post-build.sh:\ncp package/busybox/S10mdev ${TARGET_DIR}/etc/init.d/S10mdev chmod 755 ${TARGET_DIR}/etc/init.d/S10mdev cp package/busybox/mdev.conf ${TARGET_DIR}/etc/mdev.conf cp board/raspberrypi/interfaces ${TARGET_DIR}/etc/network/interfaces cp board/raspberrypi/wpa_supplicant.conf ${TARGET_DIR}/etc/wpa_supplicant.conf cp board/raspberrypi/sshd_config ${TARGET_DIR}/etc/ssh/sshd_config sshd config file\nopen/mount your sdimage.img file previously generated and copy / etc/ssh/sshd_config to buildroot/board/raspberrypi/ and add\nPermitRootLogin yes PermitEmptyPassword yes One last ride finally do\n$ make all you should have a fully working raspberry pi zero w linux custom image with ssh and wifi also you can add anything to this base build like wiringpi, gpio library, python etc even qt and xorg , keyboard support , mouse etc can be added.\nCREDITS:\nhttps://ltekieli.com/buildroot-with-raspberry-pi-what-where-and-how/\nhttps://unix.stackexchange.com/questions/205271/sshd-not-starting-after-boot-on-embedded-linux-built-with-buildroot\nhttps://blog.crysys.hu/2018/06/enabling-wifi-and-converting-the-raspberry-pi-into-a-wifi-ap/\nhttps://unix.stackexchange.com/questions/396151/buildroot-zero-w-wireless\n","permalink":"http://localhost:1313/2019/10/01/how-to-build-raspberry-pi-zero-w-buildroot-image/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/wp-content/uploads/2019/10/img_20191001_154014.jpg?w=1024\"\u003e\u003c/p\u003e\n\u003cp\u003eLately I was reading about embedded linux and came to know about two such custom embedded linux system build sytem the \u003ca href=\"https://www.yoctoproject.org/\"\u003eYocto project\u003c/a\u003e and \u003ca href=\"https://www.buildroot.org/\"\u003eBuildroot\u003c/a\u003e.I wanted to make my own custom linux for raspberyy pi zero W i had in my *ahem* attic.\u003c/p\u003e\n\u003cp\u003eRequirements:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRaspberry pi zero w (ofcourse)\u003c/li\u003e\n\u003cli\u003eA PC (with ubuntu 18.04 or higher)\u003c/li\u003e\n\u003cli\u003emicroSD card\u003c/li\u003e\n\u003cli\u003emicroSD card reader\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-1-preparing-and-downloading-buildroot\"\u003eStep 1: Preparing and downloading BUILDROOT\u003c/h2\u003e\n\u003cp\u003eOpen Ubuntu terminal (Ctrl+ALT+T) and type the below\u003c/p\u003e","title":"How to build Raspberry pi zero w BUILDROOT image"},{"content":"\nBe yourself; Everyone else is already taken.\n— Oscar Wilde.\nThis is the first post on my new blog. I’m just getting this new blog going, so stay tuned for more. Subscribe below to get notified when I post new updates.\n","permalink":"http://localhost:1313/2019/10/01/example-post/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://a8cvm2.files.wordpress.com/2019/06/calm.jpg\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eBe yourself; Everyone else is already taken.\u003c/p\u003e\n\u003cp\u003e— Oscar Wilde.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eThis is the first post on my new blog. I’m just getting this new blog going, so stay tuned for more. Subscribe below to get notified when I post new updates.\u003c/p\u003e","title":"My First Blog Post"},{"content":"Just a blog i use to write my stuff that may be useful to others too\n","permalink":"http://localhost:1313/2019/10/01/welcome-to-my-blog/","summary":"\u003cp\u003eJust a blog i use to write my stuff that may be useful to others too\u003c/p\u003e","title":"Note:\\"}]